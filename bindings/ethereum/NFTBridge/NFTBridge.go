// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NFTBridge

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NFTBridgeProposal is an auto generated low-level Go binding around an user-defined struct.
type NFTBridgeProposal struct {
	ResourceID    [32]byte
	DataHash      [32]byte
	YesVotes      []common.Address
	NoVotes       []common.Address
	Status        uint8
	ProposedBlock *big.Int
}

// NFTBridgeABI is the input ABI used to generate the binding from.
const NFTBridgeABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enumNFTBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumNFTBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalRelayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeCounterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"src721HandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeCounter_\",\"type\":\"address\"}],\"name\":\"adminSetBridgeCounterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"feeHandlerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetFeeHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enumNFTBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"internalType\":\"structNFTBridge.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"}],\"name\":\"bytesToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"slice\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sign\",\"type\":\"bytes\"}],\"name\":\"ecrecoverDecode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"asset\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signs\",\"type\":\"bytes[]\"}],\"name\":\"commitVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// NFTBridgeBin is the compiled bytecode used for deploying new contracts.
var NFTBridgeBin = "0x60806040523480156200001157600080fd5b5060405162004d6438038062004d648339818101604052810190620000379190620004ac565b60008060006101000a81548160ff02191690831515021790555082600360146101000a81548160ff021916908360ff16021790555080600481905550620000886000801b336200012460201b60201c565b620000b26040516200009a90620005c5565b60405180910390206000801b6200013a60201b60201c565b60005b82518110156200011a57620000fa604051620000d190620005c5565b6040518091039020848381518110620000e657fe5b60200260200101516200015960201b60201c565b6005600081548092919060010191905055508080600101915050620000b5565b505050506200070a565b620001368282620001e860201b60201c565b5050565b8060016000848152602001908152602001600020600201819055505050565b620001906001600084815260200190815260200160002060020154620001846200028c60201b60201c565b6200029460201b60201c565b620001d2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c990620005dc565b60405180910390fd5b620001e48282620001e860201b60201c565b5050565b620002178160016000858152602001908152602001600020600001620002cd60201b620026be1790919060201c565b1562000288576200022d6200028c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b6000620002c582600160008681526020019081526020016000206000016200030560201b6200225a1790919060201c565b905092915050565b6000620002fd836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200033d60201b60201c565b905092915050565b600062000335836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003b760201b60201c565b905092915050565b6000620003518383620003b760201b60201c565b620003ac578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620003b1565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620003eb81620006bc565b92915050565b600082601f8301126200040357600080fd5b81516200041a62000414826200062c565b620005fe565b915081818352602084019350602081019050838560208402820111156200044057600080fd5b60005b83811015620004745781620004598882620003da565b84526020840193506020830192505060018101905062000443565b5050505092915050565b6000815190506200048f81620006d6565b92915050565b600081519050620004a681620006f0565b92915050565b600080600060608486031215620004c257600080fd5b6000620004d28682870162000495565b935050602084015167ffffffffffffffff811115620004f057600080fd5b620004fe86828701620003f1565b925050604062000511868287016200047e565b9150509250925092565b60006200052a602f8362000655565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b600062000592600c8362000666565b91507f52454c415945525f524f4c4500000000000000000000000000000000000000006000830152600c82019050919050565b6000620005d28262000583565b9150819050919050565b60006020820190508181036000830152620005f7816200051b565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200062257600080fd5b8060405250919050565b600067ffffffffffffffff8211156200064457600080fd5b602082029050602081019050919050565b600082825260208201905092915050565b600081905092915050565b60006200067e8262000685565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b620006c78162000671565b8114620006d357600080fd5b50565b620006e181620006a5565b8114620006ed57600080fd5b50565b620006fb81620006af565b81146200070757600080fd5b50565b61464a806200071a6000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80639010d07c1161013b578063bfe370d9116100b8578063d547741f1161007c578063d547741f146106d9578063d7a9cd79146106f5578063dfeed9f614610713578063e00413961461072f578063ffaac0eb1461075f5761023d565b8063bfe370d914610623578063ca15c87314610653578063cb10f21514610683578063cdb0f73a1461069f578063ce804db7146106bb5761023d565b8063a217fddf116100ff578063a217fddf1461057f578063a78507d91461059d578063a9cf69fa146105b9578063b70021a9146105e9578063beab7131146106055761023d565b80639010d07c146104c757806391d14854146104f7578063926d7d7f146105275780639d5773e0146105455780639d82dd63146105635761023d565b806350366faf116101c9578063780cf0041161018d578063780cf004146104355780637a4151d0146104515780637febe63f1461046f578063802aabe81461049f57806380ae1c28146104bd5761023d565b806350366faf1461037a5780635059871914610398578063541d5548146103cb5780635c975abb146103fb5780635e1fab0f146104195761023d565b8063248a9ca311610210578063248a9ca3146102c65780632f2ff15d146102f657806336568abe146103125780633ee7094a1461032e5780634e0560051461035e5761023d565b806312494f481461024257806312d936561461027257806317f03ce51461028e5780631ba3d96c146102aa575b600080fd5b61025c60048036038101906102579190612e9b565b610769565b6040516102699190613ca2565b60405180910390f35b61028c60048036038101906102879190612c91565b61082c565b005b6102a860048036038101906102a3919061316c565b610878565b005b6102c460048036038101906102bf9190612c91565b6109d4565b005b6102e060048036038101906102db9190612de7565b610a72565b6040516102ed9190613d2a565b60405180910390f35b610310600480360381019061030b9190612e10565b610a92565b005b61032c60048036038101906103279190612e10565b610b06565b005b61034860048036038101906103439190613025565b610b89565b6040516103559190613f23565b60405180910390f35b61037860048036038101906103739190612fd3565b610c46565b005b610382610c85565b60405161038f9190613ca2565b60405180910390f35b6103b260048036038101906103ad9190613061565b610cab565b6040516103c29493929190613e2f565b60405180910390f35b6103e560048036038101906103e09190612c91565b610cf5565b6040516103f29190613d0f565b60405180910390f35b610403610d1b565b6040516104109190613d0f565b60405180910390f35b610433600480360381019061042e9190612c91565b610d31565b005b61044f600480360381019061044a9190612d35565b610d56565b005b610459610dd9565b6040516104669190613ca2565b60405180910390f35b6104896004803603810190610484919061309d565b610dff565b6040516104969190613d0f565b60405180910390f35b6104a7610e3b565b6040516104b491906141c9565b60405180910390f35b6104c5610e41565b005b6104e160048036038101906104dc9190612eef565b610e53565b6040516104ee9190613ca2565b60405180910390f35b610511600480360381019061050c9190612e10565b610e85565b60405161051e9190613d0f565b60405180910390f35b61052f610eb7565b60405161053c9190613d2a565b60405180910390f35b61054d610ece565b60405161055a91906141c9565b60405180910390f35b61057d60048036038101906105789190612c91565b610ed4565b005b610587610fae565b6040516105949190613d2a565b60405180910390f35b6105b760048036038101906105b29190612e4c565b610fb5565b005b6105d360048036038101906105ce919061316c565b611098565b6040516105e091906141a7565b60405180910390f35b61060360048036038101906105fe91906131bb565b611279565b005b61060d611990565b60405161061a91906141e4565b60405180910390f35b61063d60048036038101906106389190612f2b565b6119a3565b60405161064a9190613d2a565b60405180910390f35b61066d60048036038101906106689190612de7565b6119b1565b60405161067a91906141c9565b60405180910390f35b61069d60048036038101906106989190612d98565b6119d8565b005b6106b960048036038101906106b49190612c91565b611a99565b005b6106c3611b73565b6040516106d09190613ca2565b60405180910390f35b6106f360048036038101906106ee9190612e10565b611b99565b005b6106fd611c0d565b60405161070a91906141c9565b60405180910390f35b61072d600480360381019061072891906130ec565b611c13565b005b61074960048036038101906107449190612f6c565b611fa1565b6040516107569190613f45565b60405180910390f35b610767612055565b005b60008061078161077c8460006020611fa1565b6119a3565b9050600061079961079485602080611fa1565b6119a3565b905060006107aa8560406001611fa1565b6000815181106107b657fe5b602001015160f81c60f81b90506000601b8260f81c019050600187828686604051600081526020016040526040516107f19493929190613e74565b6020604051602081039080840390855afa158015610813573d6000803e3d6000fd5b5050506020604051035194508494505050505092915050565b610834612067565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610880612067565b60008360ff1660088467ffffffffffffffff1668ffffffffffffffffff16901b1790506000600960008368ffffffffffffffffff1668ffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002090506004808111156108ed57fe5b8160040160009054906101000a900460ff16600481111561090a57fe5b141561094b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094290614007565b60405180910390fd5b60048160040160006101000a81548160ff0219169083600481111561096c57fe5b021790555060048081111561097d57fe5b8467ffffffffffffffff168660ff167f803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417846000015485600101546040516109c5929190613e06565b60405180910390a45050505050565b6109dc612067565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166307b7ed99836040518263ffffffff1660e01b8152600401610a3c9190613ca2565b600060405180830381600087803b158015610a5657600080fd5b505af1158015610a6a573d6000803e3d6000fd5b505050505050565b600060016000838152602001908152602001600020600201549050919050565b610ab96001600084815260200190815260200160002060020154610ab46120b5565b610e85565b610af8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aef90613f87565b60405180910390fd5b610b0282826120bd565b5050565b610b0e6120b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290614187565b60405180910390fd5b610b858282612151565b5050565b6008602052816000526040600020602052806000526040600020600091509150508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b505050505081565b610c4e612067565b80600481905550807fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c860405160405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6009602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060040160009054906101000a900460ff16908060050154905084565b6000610d14604051610d0690613c8d565b604051809103902083610e85565b9050919050565b60008060009054906101000a900460ff16905090565b610d39612067565b610d466000801b82610a92565b610d536000801b33610b06565b50565b610d5e612067565b60008490508073ffffffffffffffffffffffffffffffffffffffff1663d9caed128585856040518463ffffffff1660e01b8152600401610da093929190613cd8565b600060405180830381600087803b158015610dba57600080fd5b505af1158015610dce573d6000803e3d6000fd5b505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a602052826000526040600020602052816000526040600020602052806000526040600020600092509250509054906101000a900460ff1681565b60055481565b610e49612067565b610e516121e5565b565b6000610e7d826001600086815260200190815260200160002060000161224090919063ffffffff16565b905092915050565b6000610eaf826001600086815260200190815260200160002060000161225a90919063ffffffff16565b905092915050565b604051610ec390613c8d565b604051809103902081565b60065481565b610edc612067565b610ef9604051610eeb90613c8d565b604051809103902082610e85565b610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f90613fc7565b60405180910390fd5b610f55604051610f4790613c8d565b604051809103902082611b99565b8073ffffffffffffffffffffffffffffffffffffffff167f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b60405160405180910390a26005600081548092919060019003919050555050565b6000801b81565b610fbd612067565b81600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b581b55285846040518363ffffffff1660e01b8152600401611060929190613d45565b600060405180830381600087803b15801561107a57600080fd5b505af115801561108e573d6000803e3d6000fd5b5050505050505050565b6110a0612997565b60008460ff1660088567ffffffffffffffff1668ffffffffffffffffff16901b179050600960008268ffffffffffffffffff1668ffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000206040518060c00160405290816000820154815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156111a157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611157575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561122f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116111e5575b505050505081526020016004820160009054906101000a900460ff16600481111561125657fe5b600481111561126157fe5b81526020016005820154815250509150509392505050565b61128161228a565b600082829050116112c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112be90614147565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611359576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135090614167565b60405180910390fd5b60006113ab88888888888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506122db565b905060006113fc86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050612349565b9050600061140b8a8a84612450565b905060008a60ff1660088b67ffffffffffffffff1668ffffffffffffffffff16901b17905060008090505b868690508110156116985760006114ad8689898581811061145357fe5b905060200281019061146591906141ff565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610769565b90506114cc6040516114be90613c8d565b604051809103902082610e85565b61150b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611502906140e7565b60405180910390fd5b600a60008468ffffffffffffffffff1668ffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661168a5783600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a60008568ffffffffffffffffff1668ffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b508080600101915050611436565b5060008260040160009054906101000a900460ff1660048111156116b857fe5b1415611760576006600081546001019190508190555088826000018190555082826001018190555043826005018190555060016004541115806117045750600454826002018054905010155b156117345760038260040160006101000a81548160ff0219169083600481111561172a57fe5b021790555061175b565b60018260040160006101000a81548160ff0219169083600481111561175557fe5b02179055505b6117ee565b816001015483146117a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179d90614127565b60405180910390fd5b60016004541115806117c15750600454826002018054905010155b156117ed5760038260040160006101000a81548160ff021916908360048111156117e757fe5b02179055505b5b600360048111156117fb57fe5b8260040160009054906101000a900460ff16600481111561181857fe5b141561191e5761191d33600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600001548b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508660020180548060200260200160405190810160405280929190818152602001828054801561191357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118c9575b505050505061251b565b5b8160040160009054906101000a900460ff16600481111561193b57fe5b8a67ffffffffffffffff168c60ff167f803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab6504178c8760405161197b929190613e06565b60405180910390a45050505050505050505050565b600360149054906101000a900460ff1681565b600060208201519050919050565b60006119d16001600084815260200190815260200160002060000161264e565b9050919050565b6119e0612067565b82600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008390508073ffffffffffffffffffffffffffffffffffffffff1663b8fa373684846040518363ffffffff1660e01b8152600401611a61929190613d45565b600060405180830381600087803b158015611a7b57600080fd5b505af1158015611a8f573d6000803e3d6000fd5b5050505050505050565b611aa1612067565b611abe604051611ab090613c8d565b604051809103902082610e85565b15611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af590614087565b60405180910390fd5b611b1b604051611b0d90613c8d565b604051809103902082610a92565b8073ffffffffffffffffffffffffffffffffffffffff167f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c560405160405180910390a260056000815480929190600101919050555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611bc06001600084815260200190815260200160002060020154611bbb6120b5565b610e85565b611bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf690614047565b60405180910390fd5b611c098282612151565b5050565b60045481565b611c1b61228a565b600360149054906101000a900460ff1660ff168560ff161415611c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6a90613fe7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfc906140a7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8e90614027565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166371af5099876040518263ffffffff1660e01b8152600401611df491906141e4565b602060405180830381600087803b158015611e0e57600080fd5b505af1158015611e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e469190612ffc565b9050838383604051602001611e5d93929190613c63565b604051602081830303815290604052600860008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008860ff1660ff1681526020019081526020016000209080519060200190611ebd9291906129de565b506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ba40f284878985338a8a8a6040518863ffffffff1660e01b8152600401611f2a9796959493929190613eb9565b600060405180830381600087803b158015611f4457600080fd5b505af1158015611f58573d6000803e3d6000fd5b505050508167ffffffffffffffff16868860ff167fdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed860405160405180910390a450505050505050565b606080826040519080825280601f01601f191660200182016040528015611fd75781602001600182028036833780820191505090505b50905060008090505b83811015612049578585820181518110611ff657fe5b602001015160f81c60f81b82828151811061200d57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050611fe0565b50809150509392505050565b61205d612067565b612065612663565b565b6120746000801b33610e85565b6120b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120aa90614107565b60405180910390fd5b565b600033905090565b6120e581600160008581526020019081526020016000206000016126be90919063ffffffff16565b1561214d576120f26120b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61217981600160008581526020019081526020016000206000016126ee90919063ffffffff16565b156121e1576121866120b5565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6121ed61228a565b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336040516122369190613cbd565b60405180910390a1565b600061224f836000018361271e565b60001c905092915050565b6000612282836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61278b565b905092915050565b6000809054906101000a900460ff16156122d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d090614067565b60405180910390fd5b565b6000806000606060006122ed866127ae565b93509350935093503089600360149054906101000a900460ff168a8a8888888860405160200161232599989796959493929190613bc4565b60405160208183030381529060405280519060200120945050505050949350505050565b60008073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156123dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d390614167565b60405180910390fd5b600080606060006123ec866127ae565b9350935093509350600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484848460405160200161242f959493929190613b69565b60405160208183030381529060405280519060200120945050505050919050565b6000808460ff1660088567ffffffffffffffff1668ffffffffffffffffff16901b179050600960008268ffffffffffffffffff1668ffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020915060018260040160009054906101000a900460ff1660048111156124cf57fe5b1115612510576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612507906140c7565b60405180910390fd5b819150509392505050565b6000806060600061252b866127ae565b935093509350935060008890508073ffffffffffffffffffffffffffffffffffffffff1663728e218f898787876040518563ffffffff1660e01b81526004016125779493929190613dba565b600060405180830381600087803b15801561259157600080fd5b505af11580156125a5573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166388617c2e8a8d8a876040518563ffffffff1660e01b815260040161260f9493929190613d6e565b600060405180830381600087803b15801561262957600080fd5b505af115801561263d573d6000803e3d6000fd5b505050505050505050505050505050565b600061265c826000016127de565b9050919050565b61266b6127ef565b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336040516126b49190613cbd565b60405180910390a1565b60006126e6836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61283f565b905092915050565b6000612716836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6128af565b905092915050565b600081836000018054905011612769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276090613f67565b60405180910390fd5b82600001828154811061277857fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60008060606000848060200190518101906127c99190612cba565b83935081915093509350935093509193509193565b600081600001805490509050919050565b6000809054906101000a900460ff1661283d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283490613fa7565b60405180910390fd5b565b600061284b838361278b565b6128a45782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506128a9565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461298b57600060018203905060006001866000018054905003905060008660000182815481106128fa57fe5b906000526020600020015490508087600001848154811061291757fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061294f57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612991565b60009150505b92915050565b6040518060c0016040528060008019168152602001600080191681526020016060815260200160608152602001600060048111156129d157fe5b8152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a1f57805160ff1916838001178555612a4d565b82800160010185558215612a4d579182015b82811115612a4c578251825591602001919060010190612a31565b5b509050612a5a9190612a5e565b5090565b612a8091905b80821115612a7c576000816000905550600101612a64565b5090565b90565b600081359050612a9281614573565b92915050565b600081359050612aa78161458a565b92915050565b600081519050612abc8161458a565b92915050565b60008083601f840112612ad457600080fd5b8235905067ffffffffffffffff811115612aed57600080fd5b602083019150836020820283011115612b0557600080fd5b9250929050565b600081359050612b1b816145a1565b92915050565b60008083601f840112612b3357600080fd5b8235905067ffffffffffffffff811115612b4c57600080fd5b602083019150836001820283011115612b6457600080fd5b9250929050565b600082601f830112612b7c57600080fd5b8151612b8f612b8a82614283565b614256565b91508082526020830160208301858383011115612bab57600080fd5b612bb683828461449f565b50505092915050565b600082601f830112612bd057600080fd5b8135612be3612bde826142af565b614256565b91508082526020830160208301858383011115612bff57600080fd5b612c0a838284614490565b50505092915050565b600081359050612c22816145b8565b92915050565b600081519050612c37816145b8565b92915050565b600081359050612c4c816145cf565b92915050565b600081519050612c61816145cf565b92915050565b600081359050612c76816145e6565b92915050565b600081359050612c8b816145fd565b92915050565b600060208284031215612ca357600080fd5b6000612cb184828501612a83565b91505092915050565b60008060008060808587031215612cd057600080fd5b6000612cde87828801612aad565b9450506020612cef87828801612c28565b935050604085015167ffffffffffffffff811115612d0c57600080fd5b612d1887828801612b6b565b9250506060612d2987828801612c28565b91505092959194509250565b60008060008060808587031215612d4b57600080fd5b6000612d5987828801612a83565b9450506020612d6a87828801612a83565b9350506040612d7b87828801612a98565b9250506060612d8c87828801612c13565b91505092959194509250565b600080600060608486031215612dad57600080fd5b6000612dbb86828701612a83565b9350506020612dcc86828701612b0c565b9250506040612ddd86828701612a83565b9150509250925092565b600060208284031215612df957600080fd5b6000612e0784828501612b0c565b91505092915050565b60008060408385031215612e2357600080fd5b6000612e3185828601612b0c565b9250506020612e4285828601612a83565b9150509250929050565b600080600060608486031215612e6157600080fd5b6000612e6f86828701612b0c565b9350506020612e8086828701612a83565b9250506040612e9186828701612a83565b9150509250925092565b60008060408385031215612eae57600080fd5b6000612ebc85828601612b0c565b925050602083013567ffffffffffffffff811115612ed957600080fd5b612ee585828601612bbf565b9150509250929050565b60008060408385031215612f0257600080fd5b6000612f1085828601612b0c565b9250506020612f2185828601612c13565b9150509250929050565b600060208284031215612f3d57600080fd5b600082013567ffffffffffffffff811115612f5757600080fd5b612f6384828501612bbf565b91505092915050565b600080600060608486031215612f8157600080fd5b600084013567ffffffffffffffff811115612f9b57600080fd5b612fa786828701612bbf565b9350506020612fb886828701612c13565b9250506040612fc986828701612c13565b9150509250925092565b600060208284031215612fe557600080fd5b6000612ff384828501612c13565b91505092915050565b60006020828403121561300e57600080fd5b600061301c84828501612c52565b91505092915050565b6000806040838503121561303857600080fd5b600061304685828601612c3d565b925050602061305785828601612c7c565b9150509250929050565b6000806040838503121561307457600080fd5b600061308285828601612c67565b925050602061309385828601612b0c565b9150509250929050565b6000806000606084860312156130b257600080fd5b60006130c086828701612c67565b93505060206130d186828701612b0c565b92505060406130e286828701612a83565b9150509250925092565b60008060008060006080868803121561310457600080fd5b600061311288828901612c7c565b955050602061312388828901612b0c565b945050604086013567ffffffffffffffff81111561314057600080fd5b61314c88828901612b21565b9350935050606061315f88828901612c13565b9150509295509295909350565b60008060006060848603121561318157600080fd5b600061318f86828701612c7c565b93505060206131a086828701612c3d565b92505060406131b186828701612b0c565b9150509250925092565b600080600080600080600060a0888a0312156131d657600080fd5b60006131e48a828b01612c7c565b97505060206131f58a828b01612c3d565b96505060406132068a828b01612b0c565b955050606088013567ffffffffffffffff81111561322357600080fd5b61322f8a828b01612b21565b9450945050608088013567ffffffffffffffff81111561324e57600080fd5b61325a8a828b01612ac2565b925092505092959891949750929550565b60006132778383613292565b60208301905092915050565b61328c81614448565b82525050565b61329b8161439b565b82525050565b6132aa8161439b565b82525050565b6132c16132bc8261439b565b6144d2565b82525050565b60006132d282614306565b6132dc8185614352565b93506132e7836142eb565b8060005b838110156133185781516132ff888261326b565b975061330a83614334565b9250506001810190506132eb565b5085935050505092915050565b6000613330826142fb565b61333a8185614341565b9350613345836142db565b8060005b8381101561337657815161335d888261326b565b975061336883614327565b925050600181019050613349565b5085935050505092915050565b61338c816143bf565b82525050565b61339b816143cb565b82525050565b6133aa816143cb565b82525050565b6133c16133bc826143cb565b6144e4565b82525050565b60006133d38385614363565b93506133e0838584614490565b6133e98361452e565b840190509392505050565b60006134008385614374565b935061340d838584614490565b82840190509392505050565b60006134248261431c565b61342e8185614363565b935061343e81856020860161449f565b6134478161452e565b840191505092915050565b600061345d8261431c565b6134678185614374565b935061347781856020860161449f565b80840191505092915050565b600061348e82614311565b6134988185614363565b93506134a881856020860161449f565b6134b18161452e565b840191505092915050565b6134c58161445a565b82525050565b6134d48161445a565b82525050565b60006134e760228361437f565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061354d602f8361437f565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b60006135b360148361437f565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b60006135f3601f8361437f565b91507f6164647220646f65736e277420686176652072656c6179657220726f6c6521006000830152602082019050919050565b6000613633601a8361437f565b91507f64657374696e6174696f6e436861696e49442069732073656c660000000000006000830152602082019050919050565b6000613673601a8361437f565b91507f50726f706f73616c20616c72656164792063616e63656c6c65640000000000006000830152602082019050919050565b60006136b360208361437f565b91507f7265736f757263654944206e6f74206d617070656420746f2068616e646c65726000830152602082019050919050565b60006136f360308361437f565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f207265766f6b65000000000000000000000000000000006020830152604082019050919050565b600061375960108361437f565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000613799601e8361437f565b91507f6164647220616c7265616479206861732072656c6179657220726f6c652100006000830152602082019050919050565b60006137d9601d8361437f565b91507f6e6f742073657420627269646765436f756e74657220616464726573730000006000830152602082019050919050565b6000613819602a8361437f565b91507f70726f706f73616c20616c7265616479207061737365642f657865637574656460008301527f2f63616e63656c6c6564000000000000000000000000000000000000000000006020830152604082019050919050565b600061387f60118361437f565b91507f6e6f742072656c61796572207369676e730000000000000000000000000000006000830152602082019050919050565b60006138bf601e8361437f565b91507f73656e64657220646f65736e277420686176652061646d696e20726f6c6500006000830152602082019050919050565b60006138ff600c83614390565b91507f52454c415945525f524f4c4500000000000000000000000000000000000000006000830152600c82019050919050565b600061393f60118361437f565b91507f6461746168617368206d69736d617463680000000000000000000000000000006000830152602082019050919050565b600061397f600d8361437f565b91507f696e76616c6964207369676e73000000000000000000000000000000000000006000830152602082019050919050565b60006139bf60198361437f565b91507f6e6f2068616e646c657220666f72207265736f757263654944000000000000006000830152602082019050919050565b60006139ff602f8361437f565b91507f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008301527f20726f6c657320666f722073656c6600000000000000000000000000000000006020830152604082019050919050565b600060c083016000830151613a706000860182613392565b506020830151613a836020860182613392565b5060408301518482036040860152613a9b8282613325565b91505060608301518482036060860152613ab58282613325565b9150506080830151613aca60808601826134bc565b5060a0830151613add60a0860182613ae8565b508091505092915050565b613af181614408565b82525050565b613b0081614408565b82525050565b613b17613b1282614408565b614500565b82525050565b613b2681614412565b82525050565b613b3d613b3882614412565b61450a565b82525050565b613b4c8161443b565b82525050565b613b63613b5e8261443b565b61451c565b82525050565b6000613b7582886132b0565b601482019150613b8582876132b0565b601482019150613b958286613b06565b602082019150613ba58285613452565b9150613bb18284613b06565b6020820191508190509695505050505050565b6000613bd0828c6132b0565b601482019150613be0828b613b52565b600182019150613bf0828a613b52565b600182019150613c008289613b2c565b600882019150613c1082886133b0565b602082019150613c2082876132b0565b601482019150613c308286613b06565b602082019150613c408285613452565b9150613c4c8284613b06565b6020820191508190509a9950505050505050505050565b6000613c708285876133f4565b9150613c7c8284613b06565b602082019150819050949350505050565b6000613c98826138f2565b9150819050919050565b6000602082019050613cb760008301846132a1565b92915050565b6000602082019050613cd26000830184613283565b92915050565b6000606082019050613ced60008301866132a1565b613cfa6020830185613283565b613d076040830184613af7565b949350505050565b6000602082019050613d246000830184613383565b92915050565b6000602082019050613d3f60008301846133a1565b92915050565b6000604082019050613d5a60008301856133a1565b613d6760208301846132a1565b9392505050565b6000608082019050613d8360008301876133a1565b613d9060208301866132a1565b8181036040830152613da281856132c7565b9050613db16060830184613af7565b95945050505050565b6000608082019050613dcf60008301876133a1565b613ddc60208301866132a1565b613de96040830185613af7565b8181036060830152613dfb8184613419565b905095945050505050565b6000604082019050613e1b60008301856133a1565b613e2860208301846133a1565b9392505050565b6000608082019050613e4460008301876133a1565b613e5160208301866133a1565b613e5e60408301856134cb565b613e6b6060830184613af7565b95945050505050565b6000608082019050613e8960008301876133a1565b613e966020830186613b43565b613ea360408301856133a1565b613eb060608301846133a1565b95945050505050565b600060c082019050613ece600083018a6133a1565b613edb6020830189613b43565b613ee86040830188613b1d565b613ef56060830187613283565b8181036080830152613f088185876133c7565b9050613f1760a0830184613af7565b98975050505050505050565b60006020820190508181036000830152613f3d8184613483565b905092915050565b60006020820190508181036000830152613f5f8184613419565b905092915050565b60006020820190508181036000830152613f80816134da565b9050919050565b60006020820190508181036000830152613fa081613540565b9050919050565b60006020820190508181036000830152613fc0816135a6565b9050919050565b60006020820190508181036000830152613fe0816135e6565b9050919050565b6000602082019050818103600083015261400081613626565b9050919050565b6000602082019050818103600083015261402081613666565b9050919050565b60006020820190508181036000830152614040816136a6565b9050919050565b60006020820190508181036000830152614060816136e6565b9050919050565b600060208201905081810360008301526140808161374c565b9050919050565b600060208201905081810360008301526140a08161378c565b9050919050565b600060208201905081810360008301526140c0816137cc565b9050919050565b600060208201905081810360008301526140e08161380c565b9050919050565b6000602082019050818103600083015261410081613872565b9050919050565b60006020820190508181036000830152614120816138b2565b9050919050565b6000602082019050818103600083015261414081613932565b9050919050565b6000602082019050818103600083015261416081613972565b9050919050565b60006020820190508181036000830152614180816139b2565b9050919050565b600060208201905081810360008301526141a0816139f2565b9050919050565b600060208201905081810360008301526141c18184613a58565b905092915050565b60006020820190506141de6000830184613af7565b92915050565b60006020820190506141f96000830184613b43565b92915050565b6000808335600160200384360303811261421857600080fd5b80840192508235915067ffffffffffffffff82111561423657600080fd5b60208301925060018202360383131561424e57600080fd5b509250929050565b6000604051905081810181811067ffffffffffffffff8211171561427957600080fd5b8060405250919050565b600067ffffffffffffffff82111561429a57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156142c657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006143a6826143e8565b9050919050565b60006143b8826143e8565b9050919050565b60008115159050919050565b6000819050919050565b60008190506143e382614566565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b600068ffffffffffffffffff82169050919050565b600060ff82169050919050565b60006144538261446c565b9050919050565b6000614465826143d5565b9050919050565b60006144778261447e565b9050919050565b6000614489826143e8565b9050919050565b82818337600083830152505050565b60005b838110156144bd5780820151818401526020810190506144a2565b838111156144cc576000848401525b50505050565b60006144dd826144ee565b9050919050565b6000819050919050565b60006144f982614559565b9050919050565b6000819050919050565b60006145158261453f565b9050919050565b60006145278261454c565b9050919050565b6000601f19601f8301169050919050565b60008160c01b9050919050565b60008160f81b9050919050565b60008160601b9050919050565b6005811061457057fe5b50565b61457c8161439b565b811461458757600080fd5b50565b614593816143ad565b811461459e57600080fd5b50565b6145aa816143cb565b81146145b557600080fd5b50565b6145c181614408565b81146145cc57600080fd5b50565b6145d881614412565b81146145e357600080fd5b50565b6145ef81614426565b81146145fa57600080fd5b50565b6146068161443b565b811461461157600080fd5b5056fea26469706673582212207185b3ee70c0cd08b540faad0899e5504cf46fde28f10b440e79c07f5b3d0a9764736f6c63430006040033"

// DeployNFTBridge deploys a new Ethereum contract, binding an instance of NFTBridge to it.
func DeployNFTBridge(auth *bind.TransactOpts, backend bind.ContractBackend, chainID uint8, initialRelayers []common.Address, initialRelayerThreshold *big.Int) (common.Address, *types.Transaction, *NFTBridge, error) {
	parsed, err := abi.JSON(strings.NewReader(NFTBridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NFTBridgeBin), backend, chainID, initialRelayers, initialRelayerThreshold)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NFTBridge{NFTBridgeCaller: NFTBridgeCaller{contract: contract}, NFTBridgeTransactor: NFTBridgeTransactor{contract: contract}, NFTBridgeFilterer: NFTBridgeFilterer{contract: contract}}, nil
}

// NFTBridge is an auto generated Go binding around an Ethereum contract.
type NFTBridge struct {
	NFTBridgeCaller     // Read-only binding to the contract
	NFTBridgeTransactor // Write-only binding to the contract
	NFTBridgeFilterer   // Log filterer for contract events
}

// NFTBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type NFTBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NFTBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NFTBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NFTBridgeSession struct {
	Contract     *NFTBridge        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NFTBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NFTBridgeCallerSession struct {
	Contract *NFTBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// NFTBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NFTBridgeTransactorSession struct {
	Contract     *NFTBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// NFTBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type NFTBridgeRaw struct {
	Contract *NFTBridge // Generic contract binding to access the raw methods on
}

// NFTBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NFTBridgeCallerRaw struct {
	Contract *NFTBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// NFTBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NFTBridgeTransactorRaw struct {
	Contract *NFTBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNFTBridge creates a new instance of NFTBridge, bound to a specific deployed contract.
func NewNFTBridge(address common.Address, backend bind.ContractBackend) (*NFTBridge, error) {
	contract, err := bindNFTBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NFTBridge{NFTBridgeCaller: NFTBridgeCaller{contract: contract}, NFTBridgeTransactor: NFTBridgeTransactor{contract: contract}, NFTBridgeFilterer: NFTBridgeFilterer{contract: contract}}, nil
}

// NewNFTBridgeCaller creates a new read-only instance of NFTBridge, bound to a specific deployed contract.
func NewNFTBridgeCaller(address common.Address, caller bind.ContractCaller) (*NFTBridgeCaller, error) {
	contract, err := bindNFTBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeCaller{contract: contract}, nil
}

// NewNFTBridgeTransactor creates a new write-only instance of NFTBridge, bound to a specific deployed contract.
func NewNFTBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*NFTBridgeTransactor, error) {
	contract, err := bindNFTBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeTransactor{contract: contract}, nil
}

// NewNFTBridgeFilterer creates a new log filterer instance of NFTBridge, bound to a specific deployed contract.
func NewNFTBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*NFTBridgeFilterer, error) {
	contract, err := bindNFTBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeFilterer{contract: contract}, nil
}

// bindNFTBridge binds a generic wrapper to an already deployed contract.
func bindNFTBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NFTBridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NFTBridge *NFTBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NFTBridge.Contract.NFTBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NFTBridge *NFTBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTBridge.Contract.NFTBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NFTBridge *NFTBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NFTBridge.Contract.NFTBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NFTBridge *NFTBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NFTBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NFTBridge *NFTBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NFTBridge *NFTBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NFTBridge.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_NFTBridge *NFTBridgeCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_NFTBridge *NFTBridgeSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _NFTBridge.Contract.DEFAULTADMINROLE(&_NFTBridge.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_NFTBridge *NFTBridgeCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _NFTBridge.Contract.DEFAULTADMINROLE(&_NFTBridge.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_NFTBridge *NFTBridgeCaller) RELAYERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "RELAYER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_NFTBridge *NFTBridgeSession) RELAYERROLE() ([32]byte, error) {
	return _NFTBridge.Contract.RELAYERROLE(&_NFTBridge.CallOpts)
}

// RELAYERROLE is a free data retrieval call binding the contract method 0x926d7d7f.
//
// Solidity: function RELAYER_ROLE() view returns(bytes32)
func (_NFTBridge *NFTBridgeCallerSession) RELAYERROLE() ([32]byte, error) {
	return _NFTBridge.Contract.RELAYERROLE(&_NFTBridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_NFTBridge *NFTBridgeCaller) ChainID(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "_chainID")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_NFTBridge *NFTBridgeSession) ChainID() (uint8, error) {
	return _NFTBridge.Contract.ChainID(&_NFTBridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_NFTBridge *NFTBridgeCallerSession) ChainID() (uint8, error) {
	return _NFTBridge.Contract.ChainID(&_NFTBridge.CallOpts)
}

// DepositRecords is a free data retrieval call binding the contract method 0x3ee7094a.
//
// Solidity: function _depositRecords(uint64 , uint8 ) view returns(bytes)
func (_NFTBridge *NFTBridgeCaller) DepositRecords(opts *bind.CallOpts, arg0 uint64, arg1 uint8) ([]byte, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "_depositRecords", arg0, arg1)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// DepositRecords is a free data retrieval call binding the contract method 0x3ee7094a.
//
// Solidity: function _depositRecords(uint64 , uint8 ) view returns(bytes)
func (_NFTBridge *NFTBridgeSession) DepositRecords(arg0 uint64, arg1 uint8) ([]byte, error) {
	return _NFTBridge.Contract.DepositRecords(&_NFTBridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x3ee7094a.
//
// Solidity: function _depositRecords(uint64 , uint8 ) view returns(bytes)
func (_NFTBridge *NFTBridgeCallerSession) DepositRecords(arg0 uint64, arg1 uint8) ([]byte, error) {
	return _NFTBridge.Contract.DepositRecords(&_NFTBridge.CallOpts, arg0, arg1)
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x7febe63f.
//
// Solidity: function _hasVotedOnProposal(uint72 , bytes32 , address ) view returns(bool)
func (_NFTBridge *NFTBridgeCaller) HasVotedOnProposal(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte, arg2 common.Address) (bool, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "_hasVotedOnProposal", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x7febe63f.
//
// Solidity: function _hasVotedOnProposal(uint72 , bytes32 , address ) view returns(bool)
func (_NFTBridge *NFTBridgeSession) HasVotedOnProposal(arg0 *big.Int, arg1 [32]byte, arg2 common.Address) (bool, error) {
	return _NFTBridge.Contract.HasVotedOnProposal(&_NFTBridge.CallOpts, arg0, arg1, arg2)
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x7febe63f.
//
// Solidity: function _hasVotedOnProposal(uint72 , bytes32 , address ) view returns(bool)
func (_NFTBridge *NFTBridgeCallerSession) HasVotedOnProposal(arg0 *big.Int, arg1 [32]byte, arg2 common.Address) (bool, error) {
	return _NFTBridge.Contract.HasVotedOnProposal(&_NFTBridge.CallOpts, arg0, arg1, arg2)
}

// Proposals is a free data retrieval call binding the contract method 0x50598719.
//
// Solidity: function _proposals(uint72 , bytes32 ) view returns(bytes32 _resourceID, bytes32 _dataHash, uint8 _status, uint256 _proposedBlock)
func (_NFTBridge *NFTBridgeCaller) Proposals(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	ResourceID    [32]byte
	DataHash      [32]byte
	Status        uint8
	ProposedBlock *big.Int
}, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "_proposals", arg0, arg1)

	outstruct := new(struct {
		ResourceID    [32]byte
		DataHash      [32]byte
		Status        uint8
		ProposedBlock *big.Int
	})

	outstruct.ResourceID = out[0].([32]byte)
	outstruct.DataHash = out[1].([32]byte)
	outstruct.Status = out[2].(uint8)
	outstruct.ProposedBlock = out[3].(*big.Int)

	return *outstruct, err

}

// Proposals is a free data retrieval call binding the contract method 0x50598719.
//
// Solidity: function _proposals(uint72 , bytes32 ) view returns(bytes32 _resourceID, bytes32 _dataHash, uint8 _status, uint256 _proposedBlock)
func (_NFTBridge *NFTBridgeSession) Proposals(arg0 *big.Int, arg1 [32]byte) (struct {
	ResourceID    [32]byte
	DataHash      [32]byte
	Status        uint8
	ProposedBlock *big.Int
}, error) {
	return _NFTBridge.Contract.Proposals(&_NFTBridge.CallOpts, arg0, arg1)
}

// Proposals is a free data retrieval call binding the contract method 0x50598719.
//
// Solidity: function _proposals(uint72 , bytes32 ) view returns(bytes32 _resourceID, bytes32 _dataHash, uint8 _status, uint256 _proposedBlock)
func (_NFTBridge *NFTBridgeCallerSession) Proposals(arg0 *big.Int, arg1 [32]byte) (struct {
	ResourceID    [32]byte
	DataHash      [32]byte
	Status        uint8
	ProposedBlock *big.Int
}, error) {
	return _NFTBridge.Contract.Proposals(&_NFTBridge.CallOpts, arg0, arg1)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_NFTBridge *NFTBridgeCaller) RelayerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "_relayerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_NFTBridge *NFTBridgeSession) RelayerThreshold() (*big.Int, error) {
	return _NFTBridge.Contract.RelayerThreshold(&_NFTBridge.CallOpts)
}

// RelayerThreshold is a free data retrieval call binding the contract method 0xd7a9cd79.
//
// Solidity: function _relayerThreshold() view returns(uint256)
func (_NFTBridge *NFTBridgeCallerSession) RelayerThreshold() (*big.Int, error) {
	return _NFTBridge.Contract.RelayerThreshold(&_NFTBridge.CallOpts)
}

// TotalProposals is a free data retrieval call binding the contract method 0x9d5773e0.
//
// Solidity: function _totalProposals() view returns(uint256)
func (_NFTBridge *NFTBridgeCaller) TotalProposals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "_totalProposals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalProposals is a free data retrieval call binding the contract method 0x9d5773e0.
//
// Solidity: function _totalProposals() view returns(uint256)
func (_NFTBridge *NFTBridgeSession) TotalProposals() (*big.Int, error) {
	return _NFTBridge.Contract.TotalProposals(&_NFTBridge.CallOpts)
}

// TotalProposals is a free data retrieval call binding the contract method 0x9d5773e0.
//
// Solidity: function _totalProposals() view returns(uint256)
func (_NFTBridge *NFTBridgeCallerSession) TotalProposals() (*big.Int, error) {
	return _NFTBridge.Contract.TotalProposals(&_NFTBridge.CallOpts)
}

// TotalRelayers is a free data retrieval call binding the contract method 0x802aabe8.
//
// Solidity: function _totalRelayers() view returns(uint256)
func (_NFTBridge *NFTBridgeCaller) TotalRelayers(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "_totalRelayers")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalRelayers is a free data retrieval call binding the contract method 0x802aabe8.
//
// Solidity: function _totalRelayers() view returns(uint256)
func (_NFTBridge *NFTBridgeSession) TotalRelayers() (*big.Int, error) {
	return _NFTBridge.Contract.TotalRelayers(&_NFTBridge.CallOpts)
}

// TotalRelayers is a free data retrieval call binding the contract method 0x802aabe8.
//
// Solidity: function _totalRelayers() view returns(uint256)
func (_NFTBridge *NFTBridgeCallerSession) TotalRelayers() (*big.Int, error) {
	return _NFTBridge.Contract.TotalRelayers(&_NFTBridge.CallOpts)
}

// BridgeCounterAddress is a free data retrieval call binding the contract method 0x50366faf.
//
// Solidity: function bridgeCounterAddress() view returns(address)
func (_NFTBridge *NFTBridgeCaller) BridgeCounterAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "bridgeCounterAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BridgeCounterAddress is a free data retrieval call binding the contract method 0x50366faf.
//
// Solidity: function bridgeCounterAddress() view returns(address)
func (_NFTBridge *NFTBridgeSession) BridgeCounterAddress() (common.Address, error) {
	return _NFTBridge.Contract.BridgeCounterAddress(&_NFTBridge.CallOpts)
}

// BridgeCounterAddress is a free data retrieval call binding the contract method 0x50366faf.
//
// Solidity: function bridgeCounterAddress() view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) BridgeCounterAddress() (common.Address, error) {
	return _NFTBridge.Contract.BridgeCounterAddress(&_NFTBridge.CallOpts)
}

// BytesToBytes32 is a free data retrieval call binding the contract method 0xbfe370d9.
//
// Solidity: function bytesToBytes32(bytes source) pure returns(bytes32 result)
func (_NFTBridge *NFTBridgeCaller) BytesToBytes32(opts *bind.CallOpts, source []byte) ([32]byte, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "bytesToBytes32", source)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// BytesToBytes32 is a free data retrieval call binding the contract method 0xbfe370d9.
//
// Solidity: function bytesToBytes32(bytes source) pure returns(bytes32 result)
func (_NFTBridge *NFTBridgeSession) BytesToBytes32(source []byte) ([32]byte, error) {
	return _NFTBridge.Contract.BytesToBytes32(&_NFTBridge.CallOpts, source)
}

// BytesToBytes32 is a free data retrieval call binding the contract method 0xbfe370d9.
//
// Solidity: function bytesToBytes32(bytes source) pure returns(bytes32 result)
func (_NFTBridge *NFTBridgeCallerSession) BytesToBytes32(source []byte) ([32]byte, error) {
	return _NFTBridge.Contract.BytesToBytes32(&_NFTBridge.CallOpts, source)
}

// EcrecoverDecode is a free data retrieval call binding the contract method 0x12494f48.
//
// Solidity: function ecrecoverDecode(bytes32 signHash, bytes sign) pure returns(address addr)
func (_NFTBridge *NFTBridgeCaller) EcrecoverDecode(opts *bind.CallOpts, signHash [32]byte, sign []byte) (common.Address, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "ecrecoverDecode", signHash, sign)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// EcrecoverDecode is a free data retrieval call binding the contract method 0x12494f48.
//
// Solidity: function ecrecoverDecode(bytes32 signHash, bytes sign) pure returns(address addr)
func (_NFTBridge *NFTBridgeSession) EcrecoverDecode(signHash [32]byte, sign []byte) (common.Address, error) {
	return _NFTBridge.Contract.EcrecoverDecode(&_NFTBridge.CallOpts, signHash, sign)
}

// EcrecoverDecode is a free data retrieval call binding the contract method 0x12494f48.
//
// Solidity: function ecrecoverDecode(bytes32 signHash, bytes sign) pure returns(address addr)
func (_NFTBridge *NFTBridgeCallerSession) EcrecoverDecode(signHash [32]byte, sign []byte) (common.Address, error) {
	return _NFTBridge.Contract.EcrecoverDecode(&_NFTBridge.CallOpts, signHash, sign)
}

// FeeHandlerAddress is a free data retrieval call binding the contract method 0x7a4151d0.
//
// Solidity: function feeHandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeCaller) FeeHandlerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "feeHandlerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeHandlerAddress is a free data retrieval call binding the contract method 0x7a4151d0.
//
// Solidity: function feeHandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeSession) FeeHandlerAddress() (common.Address, error) {
	return _NFTBridge.Contract.FeeHandlerAddress(&_NFTBridge.CallOpts)
}

// FeeHandlerAddress is a free data retrieval call binding the contract method 0x7a4151d0.
//
// Solidity: function feeHandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) FeeHandlerAddress() (common.Address, error) {
	return _NFTBridge.Contract.FeeHandlerAddress(&_NFTBridge.CallOpts)
}

// GetProposal is a free data retrieval call binding the contract method 0xa9cf69fa.
//
// Solidity: function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) view returns((bytes32,bytes32,address[],address[],uint8,uint256))
func (_NFTBridge *NFTBridgeCaller) GetProposal(opts *bind.CallOpts, originChainID uint8, depositNonce uint64, dataHash [32]byte) (NFTBridgeProposal, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "getProposal", originChainID, depositNonce, dataHash)

	if err != nil {
		return *new(NFTBridgeProposal), err
	}

	out0 := *abi.ConvertType(out[0], new(NFTBridgeProposal)).(*NFTBridgeProposal)

	return out0, err

}

// GetProposal is a free data retrieval call binding the contract method 0xa9cf69fa.
//
// Solidity: function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) view returns((bytes32,bytes32,address[],address[],uint8,uint256))
func (_NFTBridge *NFTBridgeSession) GetProposal(originChainID uint8, depositNonce uint64, dataHash [32]byte) (NFTBridgeProposal, error) {
	return _NFTBridge.Contract.GetProposal(&_NFTBridge.CallOpts, originChainID, depositNonce, dataHash)
}

// GetProposal is a free data retrieval call binding the contract method 0xa9cf69fa.
//
// Solidity: function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) view returns((bytes32,bytes32,address[],address[],uint8,uint256))
func (_NFTBridge *NFTBridgeCallerSession) GetProposal(originChainID uint8, depositNonce uint64, dataHash [32]byte) (NFTBridgeProposal, error) {
	return _NFTBridge.Contract.GetProposal(&_NFTBridge.CallOpts, originChainID, depositNonce, dataHash)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_NFTBridge *NFTBridgeCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_NFTBridge *NFTBridgeSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _NFTBridge.Contract.GetRoleAdmin(&_NFTBridge.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_NFTBridge *NFTBridgeCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _NFTBridge.Contract.GetRoleAdmin(&_NFTBridge.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_NFTBridge *NFTBridgeCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_NFTBridge *NFTBridgeSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _NFTBridge.Contract.GetRoleMember(&_NFTBridge.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _NFTBridge.Contract.GetRoleMember(&_NFTBridge.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_NFTBridge *NFTBridgeCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_NFTBridge *NFTBridgeSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _NFTBridge.Contract.GetRoleMemberCount(&_NFTBridge.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_NFTBridge *NFTBridgeCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _NFTBridge.Contract.GetRoleMemberCount(&_NFTBridge.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_NFTBridge *NFTBridgeCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_NFTBridge *NFTBridgeSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _NFTBridge.Contract.HasRole(&_NFTBridge.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_NFTBridge *NFTBridgeCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _NFTBridge.Contract.HasRole(&_NFTBridge.CallOpts, role, account)
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_NFTBridge *NFTBridgeCaller) IsRelayer(opts *bind.CallOpts, relayer common.Address) (bool, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "isRelayer", relayer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_NFTBridge *NFTBridgeSession) IsRelayer(relayer common.Address) (bool, error) {
	return _NFTBridge.Contract.IsRelayer(&_NFTBridge.CallOpts, relayer)
}

// IsRelayer is a free data retrieval call binding the contract method 0x541d5548.
//
// Solidity: function isRelayer(address relayer) view returns(bool)
func (_NFTBridge *NFTBridgeCallerSession) IsRelayer(relayer common.Address) (bool, error) {
	return _NFTBridge.Contract.IsRelayer(&_NFTBridge.CallOpts, relayer)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NFTBridge *NFTBridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NFTBridge *NFTBridgeSession) Paused() (bool, error) {
	return _NFTBridge.Contract.Paused(&_NFTBridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NFTBridge *NFTBridgeCallerSession) Paused() (bool, error) {
	return _NFTBridge.Contract.Paused(&_NFTBridge.CallOpts)
}

// Slice is a free data retrieval call binding the contract method 0xe0041396.
//
// Solidity: function slice(bytes data, uint256 start, uint256 len) pure returns(bytes)
func (_NFTBridge *NFTBridgeCaller) Slice(opts *bind.CallOpts, data []byte, start *big.Int, len *big.Int) ([]byte, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "slice", data, start, len)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Slice is a free data retrieval call binding the contract method 0xe0041396.
//
// Solidity: function slice(bytes data, uint256 start, uint256 len) pure returns(bytes)
func (_NFTBridge *NFTBridgeSession) Slice(data []byte, start *big.Int, len *big.Int) ([]byte, error) {
	return _NFTBridge.Contract.Slice(&_NFTBridge.CallOpts, data, start, len)
}

// Slice is a free data retrieval call binding the contract method 0xe0041396.
//
// Solidity: function slice(bytes data, uint256 start, uint256 len) pure returns(bytes)
func (_NFTBridge *NFTBridgeCallerSession) Slice(data []byte, start *big.Int, len *big.Int) ([]byte, error) {
	return _NFTBridge.Contract.Slice(&_NFTBridge.CallOpts, data, start, len)
}

// Src721HandlerAddress is a free data retrieval call binding the contract method 0xce804db7.
//
// Solidity: function src721HandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeCaller) Src721HandlerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NFTBridge.contract.Call(opts, &out, "src721HandlerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Src721HandlerAddress is a free data retrieval call binding the contract method 0xce804db7.
//
// Solidity: function src721HandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeSession) Src721HandlerAddress() (common.Address, error) {
	return _NFTBridge.Contract.Src721HandlerAddress(&_NFTBridge.CallOpts)
}

// Src721HandlerAddress is a free data retrieval call binding the contract method 0xce804db7.
//
// Solidity: function src721HandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) Src721HandlerAddress() (common.Address, error) {
	return _NFTBridge.Contract.Src721HandlerAddress(&_NFTBridge.CallOpts)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminAddRelayer(opts *bind.TransactOpts, relayerAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminAddRelayer", relayerAddress)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_NFTBridge *NFTBridgeSession) AdminAddRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminAddRelayer(&_NFTBridge.TransactOpts, relayerAddress)
}

// AdminAddRelayer is a paid mutator transaction binding the contract method 0xcdb0f73a.
//
// Solidity: function adminAddRelayer(address relayerAddress) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminAddRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminAddRelayer(&_NFTBridge.TransactOpts, relayerAddress)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminChangeRelayerThreshold(opts *bind.TransactOpts, newThreshold *big.Int) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminChangeRelayerThreshold", newThreshold)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_NFTBridge *NFTBridgeSession) AdminChangeRelayerThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminChangeRelayerThreshold(&_NFTBridge.TransactOpts, newThreshold)
}

// AdminChangeRelayerThreshold is a paid mutator transaction binding the contract method 0x4e056005.
//
// Solidity: function adminChangeRelayerThreshold(uint256 newThreshold) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminChangeRelayerThreshold(newThreshold *big.Int) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminChangeRelayerThreshold(&_NFTBridge.TransactOpts, newThreshold)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_NFTBridge *NFTBridgeTransactor) AdminPauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminPauseTransfers")
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_NFTBridge *NFTBridgeSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminPauseTransfers(&_NFTBridge.TransactOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminPauseTransfers(&_NFTBridge.TransactOpts)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminRemoveRelayer(opts *bind.TransactOpts, relayerAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminRemoveRelayer", relayerAddress)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_NFTBridge *NFTBridgeSession) AdminRemoveRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminRemoveRelayer(&_NFTBridge.TransactOpts, relayerAddress)
}

// AdminRemoveRelayer is a paid mutator transaction binding the contract method 0x9d82dd63.
//
// Solidity: function adminRemoveRelayer(address relayerAddress) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminRemoveRelayer(relayerAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminRemoveRelayer(&_NFTBridge.TransactOpts, relayerAddress)
}

// AdminSetBridgeCounterContract is a paid mutator transaction binding the contract method 0x12d93656.
//
// Solidity: function adminSetBridgeCounterContract(address bridgeCounter_) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminSetBridgeCounterContract(opts *bind.TransactOpts, bridgeCounter_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminSetBridgeCounterContract", bridgeCounter_)
}

// AdminSetBridgeCounterContract is a paid mutator transaction binding the contract method 0x12d93656.
//
// Solidity: function adminSetBridgeCounterContract(address bridgeCounter_) returns()
func (_NFTBridge *NFTBridgeSession) AdminSetBridgeCounterContract(bridgeCounter_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetBridgeCounterContract(&_NFTBridge.TransactOpts, bridgeCounter_)
}

// AdminSetBridgeCounterContract is a paid mutator transaction binding the contract method 0x12d93656.
//
// Solidity: function adminSetBridgeCounterContract(address bridgeCounter_) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminSetBridgeCounterContract(bridgeCounter_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetBridgeCounterContract(&_NFTBridge.TransactOpts, bridgeCounter_)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x1ba3d96c.
//
// Solidity: function adminSetBurnable(address tokenAddress) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminSetBurnable(opts *bind.TransactOpts, tokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminSetBurnable", tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x1ba3d96c.
//
// Solidity: function adminSetBurnable(address tokenAddress) returns()
func (_NFTBridge *NFTBridgeSession) AdminSetBurnable(tokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetBurnable(&_NFTBridge.TransactOpts, tokenAddress)
}

// AdminSetBurnable is a paid mutator transaction binding the contract method 0x1ba3d96c.
//
// Solidity: function adminSetBurnable(address tokenAddress) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminSetBurnable(tokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetBurnable(&_NFTBridge.TransactOpts, tokenAddress)
}

// AdminSetFeeHandler is a paid mutator transaction binding the contract method 0xa78507d9.
//
// Solidity: function adminSetFeeHandler(bytes32 resourceId, address feeHandlerAddress_, address feeTokenAddress) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminSetFeeHandler(opts *bind.TransactOpts, resourceId [32]byte, feeHandlerAddress_ common.Address, feeTokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminSetFeeHandler", resourceId, feeHandlerAddress_, feeTokenAddress)
}

// AdminSetFeeHandler is a paid mutator transaction binding the contract method 0xa78507d9.
//
// Solidity: function adminSetFeeHandler(bytes32 resourceId, address feeHandlerAddress_, address feeTokenAddress) returns()
func (_NFTBridge *NFTBridgeSession) AdminSetFeeHandler(resourceId [32]byte, feeHandlerAddress_ common.Address, feeTokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetFeeHandler(&_NFTBridge.TransactOpts, resourceId, feeHandlerAddress_, feeTokenAddress)
}

// AdminSetFeeHandler is a paid mutator transaction binding the contract method 0xa78507d9.
//
// Solidity: function adminSetFeeHandler(bytes32 resourceId, address feeHandlerAddress_, address feeTokenAddress) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminSetFeeHandler(resourceId [32]byte, feeHandlerAddress_ common.Address, feeTokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetFeeHandler(&_NFTBridge.TransactOpts, resourceId, feeHandlerAddress_, feeTokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminSetResource(opts *bind.TransactOpts, handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminSetResource", handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_NFTBridge *NFTBridgeSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetResource(&_NFTBridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminSetResource is a paid mutator transaction binding the contract method 0xcb10f215.
//
// Solidity: function adminSetResource(address handlerAddress, bytes32 resourceID, address tokenAddress) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminSetResource(handlerAddress common.Address, resourceID [32]byte, tokenAddress common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetResource(&_NFTBridge.TransactOpts, handlerAddress, resourceID, tokenAddress)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_NFTBridge *NFTBridgeTransactor) AdminUnpauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminUnpauseTransfers")
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_NFTBridge *NFTBridgeSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminUnpauseTransfers(&_NFTBridge.TransactOpts)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminUnpauseTransfers(&_NFTBridge.TransactOpts)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0x780cf004.
//
// Solidity: function adminWithdraw(address handlerAddress, address tokenAddress, address recipient, uint256 tokenId) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminWithdraw(opts *bind.TransactOpts, handlerAddress common.Address, tokenAddress common.Address, recipient common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminWithdraw", handlerAddress, tokenAddress, recipient, tokenId)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0x780cf004.
//
// Solidity: function adminWithdraw(address handlerAddress, address tokenAddress, address recipient, uint256 tokenId) returns()
func (_NFTBridge *NFTBridgeSession) AdminWithdraw(handlerAddress common.Address, tokenAddress common.Address, recipient common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminWithdraw(&_NFTBridge.TransactOpts, handlerAddress, tokenAddress, recipient, tokenId)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0x780cf004.
//
// Solidity: function adminWithdraw(address handlerAddress, address tokenAddress, address recipient, uint256 tokenId) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminWithdraw(handlerAddress common.Address, tokenAddress common.Address, recipient common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminWithdraw(&_NFTBridge.TransactOpts, handlerAddress, tokenAddress, recipient, tokenId)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x17f03ce5.
//
// Solidity: function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeTransactor) CancelProposal(opts *bind.TransactOpts, chainID uint8, depositNonce uint64, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "cancelProposal", chainID, depositNonce, dataHash)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x17f03ce5.
//
// Solidity: function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeSession) CancelProposal(chainID uint8, depositNonce uint64, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.CancelProposal(&_NFTBridge.TransactOpts, chainID, depositNonce, dataHash)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x17f03ce5.
//
// Solidity: function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeTransactorSession) CancelProposal(chainID uint8, depositNonce uint64, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.CancelProposal(&_NFTBridge.TransactOpts, chainID, depositNonce, dataHash)
}

// CommitVotes is a paid mutator transaction binding the contract method 0xb70021a9.
//
// Solidity: function commitVotes(uint8 originChainID, uint64 depositNonce, bytes32 resourceID, bytes asset, bytes[] signs) returns()
func (_NFTBridge *NFTBridgeTransactor) CommitVotes(opts *bind.TransactOpts, originChainID uint8, depositNonce uint64, resourceID [32]byte, asset []byte, signs [][]byte) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "commitVotes", originChainID, depositNonce, resourceID, asset, signs)
}

// CommitVotes is a paid mutator transaction binding the contract method 0xb70021a9.
//
// Solidity: function commitVotes(uint8 originChainID, uint64 depositNonce, bytes32 resourceID, bytes asset, bytes[] signs) returns()
func (_NFTBridge *NFTBridgeSession) CommitVotes(originChainID uint8, depositNonce uint64, resourceID [32]byte, asset []byte, signs [][]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.CommitVotes(&_NFTBridge.TransactOpts, originChainID, depositNonce, resourceID, asset, signs)
}

// CommitVotes is a paid mutator transaction binding the contract method 0xb70021a9.
//
// Solidity: function commitVotes(uint8 originChainID, uint64 depositNonce, bytes32 resourceID, bytes asset, bytes[] signs) returns()
func (_NFTBridge *NFTBridgeTransactorSession) CommitVotes(originChainID uint8, depositNonce uint64, resourceID [32]byte, asset []byte, signs [][]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.CommitVotes(&_NFTBridge.TransactOpts, originChainID, depositNonce, resourceID, asset, signs)
}

// DepositNFT is a paid mutator transaction binding the contract method 0xdfeed9f6.
//
// Solidity: function depositNFT(uint8 destinationChainID, bytes32 resourceID, bytes recipient, uint256 tokenId) returns()
func (_NFTBridge *NFTBridgeTransactor) DepositNFT(opts *bind.TransactOpts, destinationChainID uint8, resourceID [32]byte, recipient []byte, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "depositNFT", destinationChainID, resourceID, recipient, tokenId)
}

// DepositNFT is a paid mutator transaction binding the contract method 0xdfeed9f6.
//
// Solidity: function depositNFT(uint8 destinationChainID, bytes32 resourceID, bytes recipient, uint256 tokenId) returns()
func (_NFTBridge *NFTBridgeSession) DepositNFT(destinationChainID uint8, resourceID [32]byte, recipient []byte, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTBridge.Contract.DepositNFT(&_NFTBridge.TransactOpts, destinationChainID, resourceID, recipient, tokenId)
}

// DepositNFT is a paid mutator transaction binding the contract method 0xdfeed9f6.
//
// Solidity: function depositNFT(uint8 destinationChainID, bytes32 resourceID, bytes recipient, uint256 tokenId) returns()
func (_NFTBridge *NFTBridgeTransactorSession) DepositNFT(destinationChainID uint8, resourceID [32]byte, recipient []byte, tokenId *big.Int) (*types.Transaction, error) {
	return _NFTBridge.Contract.DepositNFT(&_NFTBridge.TransactOpts, destinationChainID, resourceID, recipient, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.GrantRole(&_NFTBridge.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.GrantRole(&_NFTBridge.TransactOpts, role, account)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_NFTBridge *NFTBridgeTransactor) RenounceAdmin(opts *bind.TransactOpts, newAdmin common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "renounceAdmin", newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_NFTBridge *NFTBridgeSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.RenounceAdmin(&_NFTBridge.TransactOpts, newAdmin)
}

// RenounceAdmin is a paid mutator transaction binding the contract method 0x5e1fab0f.
//
// Solidity: function renounceAdmin(address newAdmin) returns()
func (_NFTBridge *NFTBridgeTransactorSession) RenounceAdmin(newAdmin common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.RenounceAdmin(&_NFTBridge.TransactOpts, newAdmin)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.RenounceRole(&_NFTBridge.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.RenounceRole(&_NFTBridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.RevokeRole(&_NFTBridge.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_NFTBridge *NFTBridgeTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.RevokeRole(&_NFTBridge.TransactOpts, role, account)
}

// NFTBridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the NFTBridge contract.
type NFTBridgeDepositIterator struct {
	Event *NFTBridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeDeposit represents a Deposit event raised by the NFTBridge contract.
type NFTBridgeDeposit struct {
	DestinationChainID uint8
	ResourceID         [32]byte
	DepositNonce       uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed8.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce)
func (_NFTBridge *NFTBridgeFilterer) FilterDeposit(opts *bind.FilterOpts, destinationChainID []uint8, resourceID [][32]byte, depositNonce []uint64) (*NFTBridgeDepositIterator, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var resourceIDRule []interface{}
	for _, resourceIDItem := range resourceID {
		resourceIDRule = append(resourceIDRule, resourceIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "Deposit", destinationChainIDRule, resourceIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeDepositIterator{contract: _NFTBridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed8.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce)
func (_NFTBridge *NFTBridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *NFTBridgeDeposit, destinationChainID []uint8, resourceID [][32]byte, depositNonce []uint64) (event.Subscription, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var resourceIDRule []interface{}
	for _, resourceIDItem := range resourceID {
		resourceIDRule = append(resourceIDRule, resourceIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "Deposit", destinationChainIDRule, resourceIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeDeposit)
				if err := _NFTBridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed8.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce)
func (_NFTBridge *NFTBridgeFilterer) ParseDeposit(log types.Log) (*NFTBridgeDeposit, error) {
	event := new(NFTBridgeDeposit)
	if err := _NFTBridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the NFTBridge contract.
type NFTBridgePausedIterator struct {
	Event *NFTBridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgePaused represents a Paused event raised by the NFTBridge contract.
type NFTBridgePaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NFTBridge *NFTBridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*NFTBridgePausedIterator, error) {

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &NFTBridgePausedIterator{contract: _NFTBridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NFTBridge *NFTBridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *NFTBridgePaused) (event.Subscription, error) {

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgePaused)
				if err := _NFTBridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NFTBridge *NFTBridgeFilterer) ParsePaused(log types.Log) (*NFTBridgePaused, error) {
	event := new(NFTBridgePaused)
	if err := _NFTBridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeProposalEventIterator is returned from FilterProposalEvent and is used to iterate over the raw logs and unpacked data for ProposalEvent events raised by the NFTBridge contract.
type NFTBridgeProposalEventIterator struct {
	Event *NFTBridgeProposalEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeProposalEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeProposalEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeProposalEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeProposalEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeProposalEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeProposalEvent represents a ProposalEvent event raised by the NFTBridge contract.
type NFTBridgeProposalEvent struct {
	OriginChainID uint8
	DepositNonce  uint64
	Status        uint8
	ResourceID    [32]byte
	DataHash      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterProposalEvent is a free log retrieval operation binding the contract event 0x803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417.
//
// Solidity: event ProposalEvent(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID, bytes32 dataHash)
func (_NFTBridge *NFTBridgeFilterer) FilterProposalEvent(opts *bind.FilterOpts, originChainID []uint8, depositNonce []uint64, status []uint8) (*NFTBridgeProposalEventIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "ProposalEvent", originChainIDRule, depositNonceRule, statusRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeProposalEventIterator{contract: _NFTBridge.contract, event: "ProposalEvent", logs: logs, sub: sub}, nil
}

// WatchProposalEvent is a free log subscription operation binding the contract event 0x803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417.
//
// Solidity: event ProposalEvent(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID, bytes32 dataHash)
func (_NFTBridge *NFTBridgeFilterer) WatchProposalEvent(opts *bind.WatchOpts, sink chan<- *NFTBridgeProposalEvent, originChainID []uint8, depositNonce []uint64, status []uint8) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "ProposalEvent", originChainIDRule, depositNonceRule, statusRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeProposalEvent)
				if err := _NFTBridge.contract.UnpackLog(event, "ProposalEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalEvent is a log parse operation binding the contract event 0x803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417.
//
// Solidity: event ProposalEvent(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID, bytes32 dataHash)
func (_NFTBridge *NFTBridgeFilterer) ParseProposalEvent(log types.Log) (*NFTBridgeProposalEvent, error) {
	event := new(NFTBridgeProposalEvent)
	if err := _NFTBridge.contract.UnpackLog(event, "ProposalEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeRelayerAddedIterator is returned from FilterRelayerAdded and is used to iterate over the raw logs and unpacked data for RelayerAdded events raised by the NFTBridge contract.
type NFTBridgeRelayerAddedIterator struct {
	Event *NFTBridgeRelayerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeRelayerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeRelayerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeRelayerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeRelayerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeRelayerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeRelayerAdded represents a RelayerAdded event raised by the NFTBridge contract.
type NFTBridgeRelayerAdded struct {
	Relayer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRelayerAdded is a free log retrieval operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_NFTBridge *NFTBridgeFilterer) FilterRelayerAdded(opts *bind.FilterOpts, relayer []common.Address) (*NFTBridgeRelayerAddedIterator, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "RelayerAdded", relayerRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeRelayerAddedIterator{contract: _NFTBridge.contract, event: "RelayerAdded", logs: logs, sub: sub}, nil
}

// WatchRelayerAdded is a free log subscription operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_NFTBridge *NFTBridgeFilterer) WatchRelayerAdded(opts *bind.WatchOpts, sink chan<- *NFTBridgeRelayerAdded, relayer []common.Address) (event.Subscription, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "RelayerAdded", relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeRelayerAdded)
				if err := _NFTBridge.contract.UnpackLog(event, "RelayerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerAdded is a log parse operation binding the contract event 0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5.
//
// Solidity: event RelayerAdded(address indexed relayer)
func (_NFTBridge *NFTBridgeFilterer) ParseRelayerAdded(log types.Log) (*NFTBridgeRelayerAdded, error) {
	event := new(NFTBridgeRelayerAdded)
	if err := _NFTBridge.contract.UnpackLog(event, "RelayerAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeRelayerRemovedIterator is returned from FilterRelayerRemoved and is used to iterate over the raw logs and unpacked data for RelayerRemoved events raised by the NFTBridge contract.
type NFTBridgeRelayerRemovedIterator struct {
	Event *NFTBridgeRelayerRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeRelayerRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeRelayerRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeRelayerRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeRelayerRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeRelayerRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeRelayerRemoved represents a RelayerRemoved event raised by the NFTBridge contract.
type NFTBridgeRelayerRemoved struct {
	Relayer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRelayerRemoved is a free log retrieval operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_NFTBridge *NFTBridgeFilterer) FilterRelayerRemoved(opts *bind.FilterOpts, relayer []common.Address) (*NFTBridgeRelayerRemovedIterator, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "RelayerRemoved", relayerRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeRelayerRemovedIterator{contract: _NFTBridge.contract, event: "RelayerRemoved", logs: logs, sub: sub}, nil
}

// WatchRelayerRemoved is a free log subscription operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_NFTBridge *NFTBridgeFilterer) WatchRelayerRemoved(opts *bind.WatchOpts, sink chan<- *NFTBridgeRelayerRemoved, relayer []common.Address) (event.Subscription, error) {

	var relayerRule []interface{}
	for _, relayerItem := range relayer {
		relayerRule = append(relayerRule, relayerItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "RelayerRemoved", relayerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeRelayerRemoved)
				if err := _NFTBridge.contract.UnpackLog(event, "RelayerRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerRemoved is a log parse operation binding the contract event 0x10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b.
//
// Solidity: event RelayerRemoved(address indexed relayer)
func (_NFTBridge *NFTBridgeFilterer) ParseRelayerRemoved(log types.Log) (*NFTBridgeRelayerRemoved, error) {
	event := new(NFTBridgeRelayerRemoved)
	if err := _NFTBridge.contract.UnpackLog(event, "RelayerRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeRelayerThresholdChangedIterator is returned from FilterRelayerThresholdChanged and is used to iterate over the raw logs and unpacked data for RelayerThresholdChanged events raised by the NFTBridge contract.
type NFTBridgeRelayerThresholdChangedIterator struct {
	Event *NFTBridgeRelayerThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeRelayerThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeRelayerThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeRelayerThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeRelayerThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeRelayerThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeRelayerThresholdChanged represents a RelayerThresholdChanged event raised by the NFTBridge contract.
type NFTBridgeRelayerThresholdChanged struct {
	NewThreshold *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRelayerThresholdChanged is a free log retrieval operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_NFTBridge *NFTBridgeFilterer) FilterRelayerThresholdChanged(opts *bind.FilterOpts, newThreshold []*big.Int) (*NFTBridgeRelayerThresholdChangedIterator, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeRelayerThresholdChangedIterator{contract: _NFTBridge.contract, event: "RelayerThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchRelayerThresholdChanged is a free log subscription operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_NFTBridge *NFTBridgeFilterer) WatchRelayerThresholdChanged(opts *bind.WatchOpts, sink chan<- *NFTBridgeRelayerThresholdChanged, newThreshold []*big.Int) (event.Subscription, error) {

	var newThresholdRule []interface{}
	for _, newThresholdItem := range newThreshold {
		newThresholdRule = append(newThresholdRule, newThresholdItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "RelayerThresholdChanged", newThresholdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeRelayerThresholdChanged)
				if err := _NFTBridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRelayerThresholdChanged is a log parse operation binding the contract event 0xa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c8.
//
// Solidity: event RelayerThresholdChanged(uint256 indexed newThreshold)
func (_NFTBridge *NFTBridgeFilterer) ParseRelayerThresholdChanged(log types.Log) (*NFTBridgeRelayerThresholdChanged, error) {
	event := new(NFTBridgeRelayerThresholdChanged)
	if err := _NFTBridge.contract.UnpackLog(event, "RelayerThresholdChanged", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the NFTBridge contract.
type NFTBridgeRoleGrantedIterator struct {
	Event *NFTBridgeRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeRoleGranted represents a RoleGranted event raised by the NFTBridge contract.
type NFTBridgeRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_NFTBridge *NFTBridgeFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*NFTBridgeRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeRoleGrantedIterator{contract: _NFTBridge.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_NFTBridge *NFTBridgeFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *NFTBridgeRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeRoleGranted)
				if err := _NFTBridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_NFTBridge *NFTBridgeFilterer) ParseRoleGranted(log types.Log) (*NFTBridgeRoleGranted, error) {
	event := new(NFTBridgeRoleGranted)
	if err := _NFTBridge.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the NFTBridge contract.
type NFTBridgeRoleRevokedIterator struct {
	Event *NFTBridgeRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeRoleRevoked represents a RoleRevoked event raised by the NFTBridge contract.
type NFTBridgeRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_NFTBridge *NFTBridgeFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*NFTBridgeRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeRoleRevokedIterator{contract: _NFTBridge.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_NFTBridge *NFTBridgeFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *NFTBridgeRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeRoleRevoked)
				if err := _NFTBridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_NFTBridge *NFTBridgeFilterer) ParseRoleRevoked(log types.Log) (*NFTBridgeRoleRevoked, error) {
	event := new(NFTBridgeRoleRevoked)
	if err := _NFTBridge.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the NFTBridge contract.
type NFTBridgeUnpausedIterator struct {
	Event *NFTBridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeUnpaused represents a Unpaused event raised by the NFTBridge contract.
type NFTBridgeUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NFTBridge *NFTBridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*NFTBridgeUnpausedIterator, error) {

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &NFTBridgeUnpausedIterator{contract: _NFTBridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NFTBridge *NFTBridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *NFTBridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeUnpaused)
				if err := _NFTBridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NFTBridge *NFTBridgeFilterer) ParseUnpaused(log types.Log) (*NFTBridgeUnpaused, error) {
	event := new(NFTBridgeUnpaused)
	if err := _NFTBridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}
