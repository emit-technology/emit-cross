// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NFTBridge

import (
	"math/big"
	"strings"

	sero "github.com/sero-cash/go-sero"
	"github.com/sero-cash/go-sero/accounts/abi"
	"github.com/sero-cash/go-sero/accounts/abi/bind"
	"github.com/sero-cash/go-sero/common"
	"github.com/sero-cash/go-sero/core/types"
	"github.com/sero-cash/go-sero/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = sero.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NFTBridgeProposal is an auto generated low-level Go binding around an user-defined struct.
type NFTBridgeProposal struct {
	ResourceID    [32]byte
	DataHash      [32]byte
	YesVotes      []common.ContractAddress
	NoVotes       []common.ContractAddress
	Status        uint8
	ProposedBlock *big.Int
}

// NFTBridgeABI is the input ABI used to generate the binding from.
const NFTBridgeABI = "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"brigeAccessAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enumNFTBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enumNFTBridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enumNFTBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToCategory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeCounter_\",\"type\":\"address\"}],\"name\":\"adminSetBridgeCounterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossFee_\",\"type\":\"address\"}],\"name\":\"adminSetCrossFeeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"ticketAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"adminSetResourceInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"}],\"name\":\"adminSetSrc721HandlerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"currency\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tkt\",\"type\":\"bytes32\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeAccessAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeCounterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"recipient\",\"type\":\"bytes\"}],\"name\":\"depositNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enumNFTBridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"internalType\":\"structNFTBridge.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceId\",\"type\":\"bytes32\"}],\"name\":\"minCrossAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"resourceIDToLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"src721HandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// NFTBridgeBin is the compiled bytecode used for deploying new contracts.
var NFTBridgeBin = "0x60806040527f3be6bf24d822bcd6f6348f6f5a5c2d3108f04991ee63e80cde49a8c4746a0ef36001557fcf19eb4256453a4e30b6a06d651f1970c223fb6bd1826a28ed861f0e602db9b86002557f868bd6629e7c2e3d2ccf7b9968fad79b448e7a2bfb3ee20ed1acbc695c3c8b236003557f7c98e64bd943448b4e24ef8c2cdec7b8b1275970cfe10daf2a9bfa4b04dce9056004557fa6a366f1a72e1aef5d8d52ee240a476f619d15be7bc62d3df37496025b83459f6005557ff1964f6690a0536daa42e5c575091297d2479edcc96f721ad85b95358644d2766006557f9ab0d7c07029f006485cf3468ce7811aa8743b5a108599f6bec9367c50ac6aad6007557fa6cafc6282f61eff9032603a017e652f68410d3d3c69f0a3eeca8f181aec1d176008557f6800e94e36131c049eaeb631e4530829b0d3d20d5b637c8015a8dc9cedd70aed6009553480156200015557600080fd5b506040516200289f3803806200289f8339810160408190526200017891620001d5565b6000805460ff19169055600a80546001600160a01b03199081163317909155600d8054600f949094556001600160a01b039290921660ff94909416600160a01b0260ff60a01b19909316929092179091169190911790556200022a565b600080600060608486031215620001ea578283fd5b835160ff81168114620001fb578384fd5b6020850151604086015191945092506001600160a01b03811681146200021f578182fd5b809150509250925092565b612665806200023a6000396000f3fe6080604052600436106101c25760003560e01c80639201de55116100f7578063ce804db711610095578063f359d98311610064578063f359d983146104e0578063fa6bbe47146104f5578063fca0890014610523578063ffaac0eb14610543576101c2565b8063ce804db71461046b578063eac8f9e314610480578063ec226892146104a0578063f2fde38b146104c0576101c2565b8063beab7131116100d1578063beab7131146103f4578063c13e919714610416578063c2ca1ddc14610436578063c5ec897014610456576101c2565b80639201de55146103855780639d5773e0146103a5578063a9cf69fa146103c7576101c2565b80635c975abb116101645780637febe63f1161013e5780637febe63f1461032857806380ae1c2814610348578063850efd991461035d5780638da5cb5b14610370576101c2565b80635c975abb146102d1578063682150c9146102f35780637171750b14610308576101c2565b80633ee7094a116101a05780633ee7094a1461022957806350366faf1461025f578063505987191461028157806351abc947146102b1576101c2565b806312d93656146101c757806317f03ce5146101e95780631ff013f114610209575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611c4f565b610558565b005b3480156101f557600080fd5b506101e7610204366004611e71565b610582565b34801561021557600080fd5b506101e7610224366004611f08565b610686565b34801561023557600080fd5b50610249610244366004611d90565b610b16565b604051610256919061214e565b60405180910390f35b34801561026b57600080fd5b50610274610bba565b6040516102569190612047565b34801561028d57600080fd5b506102a161029c366004611dc5565b610bc9565b60405161025694939291906120b3565b3480156102bd57600080fd5b506101e76102cc366004611d02565b610c01565b3480156102dd57600080fd5b506102e6610c7a565b604051610256919061205b565b3480156102ff57600080fd5b50610274610c84565b34801561031457600080fd5b506101e7610323366004611ca9565b610c93565b34801561033457600080fd5b506102e6610343366004611df0565b610d84565b34801561035457600080fd5b506101e7610daa565b6101e761036b366004611e31565b610dbc565b34801561037c57600080fd5b5061027461115a565b34801561039157600080fd5b506102496103a0366004611c91565b611169565b3480156103b157600080fd5b506103ba61127f565b6040516102569190612066565b3480156103d357600080fd5b506103e76103e2366004611e71565b611285565b604051610256919061253f565b34801561040057600080fd5b506104096113d6565b60405161025691906125b8565b34801561042257600080fd5b50610249610431366004611c91565b6113e6565b34801561044257600080fd5b506101e7610451366004611c4f565b61144e565b34801561046257600080fd5b506103ba611478565b34801561047757600080fd5b5061027461147e565b34801561048c57600080fd5b506101e761049b366004611eb0565b61148d565b3480156104ac57600080fd5b506101e76104bb366004611c4f565b61160b565b3480156104cc57600080fd5b506101e76104db366004611c4f565b611635565b3480156104ec57600080fd5b5061027461166b565b34801561050157600080fd5b50610515610510366004611c91565b61167a565b6040516102569291906120a5565b34801561052f57600080fd5b506103ba61053e366004611c91565b611693565b34801561054f57600080fd5b506101e76116a5565b6105606116b5565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b61058a6116b5565b68ffffffffffffffff00600883901b1660ff8416176001600160481b038116600090815260126020908152604080832085845290915290206004808083015460ff16908111156105d657fe5b14156105fd5760405162461bcd60e51b81526004016105f4906122fa565b60405180910390fd5b600f54600582015461061690439063ffffffff6116df16565b116106335760405162461bcd60e51b81526004016105f49061239d565b6004818101805460ff191682179055815460018301546040516001600160401b0388169260ff8a1692600080516020612610833981519152926106779291906120a5565b60405180910390a45050505050565b61068e61170c565b6106966117a8565b68ffffffffffffffff00600884901b1660ff8516176001600160481b038116600090815260126020908152604080832085845290915290206010546001600160a01b03166106f65760405162461bcd60e51b81526004016105f490612508565b60048082015460019160ff9091169081111561070e57fe5b111561072c5760405162461bcd60e51b81526004016105f49061245e565b6001600160481b0382166000908152601360209081526040808320868452825280832033845290915290205460ff16156107785760405162461bcd60e51b81526004016105f4906121f8565b600d5460408051631e1d361760e31b815290516000926001600160a01b03169163f0e9b0b8916004808301926020929190829003018186803b1580156107bd57600080fd5b505afa1580156107d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f59190611d5c565b60048084015491925060ff9091169081111561080d57fe5b61098557600e805460019081019091556040805160c0810182528781526020810187905281518381528083018352909291830191816020016020820280368337505050815260408051600080825260208083018452808501929092526001838501819052436060909501949094526001600160481b03881681526012825282812089825282528290208451815584820151938101939093559083015180516108bb9260028501920190611a1e565b50606082015180516108d7916003840191602090910190611a1e565b5060808201518160040160006101000a81548160ff021916908360048111156108fc57fe5b021790555060a08201518160050155905050338260020160008154811061091f57fe5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560015b866001600160401b03168860ff1660008051602061261083398151915288886040516109789291906120a5565b60405180910390a4610a03565b600f54600583015461099e90439063ffffffff6116df16565b11156109b8576004828101805460ff19168217905561094b565b816001015484146109db5760405162461bcd60e51b81526004016105f4906124dd565b600282018054600181018255600091825260209091200180546001600160a01b031916331790555b60048281015460ff1681811115610a1657fe5b14610b0d576001600160481b038316600090815260136020908152604080832087845282528083203384529091529020805460ff1916600117905560048083015460ff1690811115610a6457fe5b866001600160401b03168860ff167f25f8daaa4635a7729927ba3f5b3d59cc3320aca7c32c9db4e7ca7b957434364088604051610aa19190612066565b60405180910390a4600181111580610abd575060028201548111155b15610b0d5760048201805460ff191660029081179091556040516001600160401b0388169060ff8a169060008051602061261083398151915290610b04908a908a906120a5565b60405180910390a45b50505050505050565b60116020908152600092835260408084208252918352918190208054825160026001831615610100026000190190921691909104601f810185900485028201850190935282815292909190830182828015610bb25780601f10610b8757610100808354040283529160200191610bb2565b820191906000526020600020905b815481529060010190602001808311610b9557829003601f168201915b505050505081565b600b546001600160a01b031681565b601260209081526000928352604080842090915290825290208054600182015460048301546005909301549192909160ff9091169084565b610c096116b5565b60105460405163da19cc9960e01b81526001600160a01b0390911690819063da19cc9990610c41908890889088908890600401612161565b600060405180830381600087803b158015610c5b57600080fd5b505af1158015610c6f573d6000803e3d6000fd5b505050505050505050565b60005460ff165b90565b600c546001600160a01b031681565b610c9b6116b5565b601054604051633e756d6760e01b81526001600160a01b03909116908190633e756d6790610cd1908890879087906004016120dc565b600060405180830381600087803b158015610ceb57600080fd5b505af1158015610cff573d6000803e3d6000fd5b505060405163114e4f0560e31b81526001600160a01b0384169250638a7278289150610d31908890889060040161206f565b600060405180830381600087803b158015610d4b57600080fd5b505af1158015610d5f573d6000803e3d6000fd5b5050506000868152601460205260409020610d7c91508484611a83565b505050505050565b601360209081526000938452604080852082529284528284209052825290205460ff1681565b610db26116b5565b610dba6117cb565b565b610dc46117a8565b600d5460ff858116600160a01b909204161415610df35760405162461bcd60e51b81526004016105f49061228c565b600b546001600160a01b0316610e1b5760405162461bcd60e51b81526004016105f490612427565b6060610e2561181a565b60008581526014602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452939450610eca93859392830182828015610ec05780601f10610e9557610100808354040283529160200191610ec0565b820191906000526020600020905b815481529060010190602001808311610ea357829003601f168201915b505050505061185a565b610ee65760405162461bcd60e51b81526004016105f490612255565b6010546001600160a01b0316610f0e5760405162461bcd60e51b81526004016105f490612368565b600b546040516371af509960e01b81526000916001600160a01b0316906371af509990610f3f9089906004016125b8565b602060405180830381600087803b158015610f5957600080fd5b505af1158015610f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f919190611d74565b9050838334604051602001610fa893929190612032565b60408051601f198184030181529181526001600160401b03831660009081526011602090815282822060ff8b16835281529190208251610fed93919290910190611afd565b50601054604080516020808201835260008083528981526014825283812080548551601f600260001960018516156101000201909316929092049182018590048502810185019096528086526001600160a01b03909616956110ae95929383018282801561109c5780601f106110715761010080835404028352916020019161109c565b820191906000526020600020905b81548152906001019060200180831161107f57829003601f168201915b50505050506110a96118d6565b611908565b6040516338995da960e01b81526001600160a01b038216906338995da9906110e49089908b90879033908c908c906004016120ff565b600060405180830381600087803b1580156110fe57600080fd5b505af1158015611112573d6000803e3d6000fd5b50505050816001600160401b0316868860ff167fdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed860405160405180910390a450505050505050565b600a546001600160a01b031681565b604080516020808252818301909252606091600091839160208201818036833701905050905060005b60208110156111f8576008810260020a85026001600160f81b03198116156111e357808385815181106111c157fe5b60200101906001600160f81b031916908160001a9053506001909301926111ef565b83156111ef57506111f8565b50600101611192565b506060826040519080825280601f01601f191660200182016040528015611226576020820181803683370190505b50905060005b838110156112765782818151811061124057fe5b602001015160f81c60f81b82828151811061125757fe5b60200101906001600160f81b031916908160001a90535060010161122c565b50949350505050565b600e5481565b61128d611b6b565b68ffffffffffffffff00600884901b1660ff8516176001600160481b0381166000908152601260209081526040808320868452825291829020825160c081018452815481526001820154818401526002820180548551818602810186018752818152929593949386019383018282801561133057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611312575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561139257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611374575b505050918352505060048281015460209092019160ff16908111156113b357fe5b60048111156113be57fe5b81526020016005820154815250509150509392505050565b600d54600160a01b900460ff1681565b60146020908152600091825260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610bb25780601f10610b8757610100808354040283529160200191610bb2565b6114566116b5565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b600f5481565b6010546001600160a01b031681565b61149561170c565b61149d6117a8565b60105460405168ffffffffffffffff00600887901b1660ff881617916000916114d6916001600160a01b03169086908690602001612004565b60408051601f1981840301815291815281516020928301206001600160481b0385166000908152601284528281208282529093529082209092509060048083015460ff169081111561152457fe5b14156115425760405162461bcd60e51b81526004016105f4906121c8565b600260048083015460ff169081111561155757fe5b146115745760405162461bcd60e51b81526004016105f490612191565b806001015482146115975760405162461bcd60e51b81526004016105f4906122c3565b60048101805460ff191660031790556115b186868661194d565b60048082015460ff16908111156115c457fe5b876001600160401b03168960ff16600080516020612610833981519152846000015485600101546040516115f99291906120a5565b60405180910390a45050505050505050565b6116136116b5565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b61163d6116b5565b6001600160a01b0381161561166857600a80546001600160a01b0319166001600160a01b0383161790555b50565b600d546001600160a01b031681565b6015602052600090815260409020805460019091015482565b60009081526015602052604090205490565b6116ad6116b5565b610dba6119ba565b600a546001600160a01b03163314610dba5760405162461bcd60e51b81526004016105f4906123fc565b6000828211156117015760405162461bcd60e51b81526004016105f490612331565b508082035b92915050565b600d54604051630a83aaa960e31b81526001600160a01b039091169063541d55489061173c903390600401612047565b60206040518083038186803b15801561175457600080fd5b505afa158015611768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178c9190611c71565b610dba5760405162461bcd60e51b81526004016105f4906124a8565b60005460ff1615610dba5760405162461bcd60e51b81526004016105f4906123d2565b6117d36117a8565b6000805460ff191660011790556040517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890611810903390612047565b60405180910390a1565b6040805160208082528183019092526060918291906020820181803683370190505090506000600654602083a150805161185381611169565b9250505090565b6000815183511461186d57506000611706565b60005b83518110156118cc5782818151811061188557fe5b602001015160f81c60f81b6001600160f81b0319168482815181106118a657fe5b01602001516001600160f81b031916146118c4576000915050611706565b600101611870565b5060019392505050565b60408051602080825281830190925260009160609190602082018180368337019050509050600754602082a151905090565b60408051608080825260a08201909252606091602082018180368337019050509050848152836020820152826040820152816060820152600854608082a15050505050565b60105460405162396ec160e41b81526001600160a01b03909116908190630396ec109061198290879087908790600401612086565b600060405180830381600087803b15801561199c57600080fd5b505af11580156119b0573d6000803e3d6000fd5b5050505050505050565b6119c26119fc565b6000805460ff191690556040517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90611810903390612047565b60005460ff16610dba5760405162461bcd60e51b81526004016105f490612227565b828054828255906000526020600020908101928215611a73579160200282015b82811115611a7357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611a3e565b50611a7f929150611ba3565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ac45782800160ff19823516178555611af1565b82800160010185558215611af1579182015b82811115611af1578235825591602001919060010190611ad6565b50611a7f929150611bc7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b3e57805160ff1916838001178555611af1565b82800160010185558215611af1579182015b82811115611af1578251825591602001919060010190611b50565b6040805160c0810182526000808252602082018190526060928201839052828201929092529060808201908152602001600081525090565b610c8191905b80821115611a7f5780546001600160a01b0319168155600101611ba9565b610c8191905b80821115611a7f5760008155600101611bcd565b80356001600160a01b038116811461170657600080fd5b60008083601f840112611c09578182fd5b5081356001600160401b03811115611c1f578182fd5b602083019150836020828501011115611c3757600080fd5b9250929050565b803560ff8116811461170657600080fd5b600060208284031215611c60578081fd5b611c6a8383611be1565b9392505050565b600060208284031215611c82578081fd5b81518015158114611c6a578182fd5b600060208284031215611ca2578081fd5b5035919050565b60008060008060608587031215611cbe578283fd5b843593506020850135611cd0816125d0565b925060408501356001600160401b03811115611cea578283fd5b611cf687828801611bf8565b95989497509550505050565b60008060008060608587031215611d17578384fd5b84356001600160401b03811115611d2c578485fd5b611d3887828801611bf8565b9095509350611d4c90508660208701611be1565b9396929550929360400135925050565b600060208284031215611d6d578081fd5b5051919050565b600060208284031215611d85578081fd5b8151611c6a816125e5565b60008060408385031215611da2578182fd5b8235611dad816125e5565b9150611dbc8460208501611c3e565b90509250929050565b60008060408385031215611dd7578182fd5b8235611de2816125fa565b946020939093013593505050565b600080600060608486031215611e04578283fd5b8335611e0f816125fa565b9250602084013591506040840135611e26816125d0565b809150509250925092565b60008060008060608587031215611e46578384fd5b611e508686611c3e565b93506020850135925060408501356001600160401b03811115611cea578283fd5b600080600060608486031215611e85578283fd5b611e8f8585611c3e565b92506020840135611e9f816125e5565b929592945050506040919091013590565b600080600080600060a08688031215611ec7578283fd5b611ed18787611c3e565b94506020860135611ee1816125e5565b935060408601359250611ef78760608801611be1565b949793965091946080013592915050565b60008060008060808587031215611f1d578182fd5b611f278686611c3e565b93506020850135611f37816125e5565b93969395505050506040820135916060013590565b6000815180845260208085019450808401835b83811015611f845781516001600160a01b031687529582019590820190600101611f5f565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452815b81811015611fde57602081850181015186830182015201611fc2565b81811115611fef5782602083870101525b50601f01601f19169290920160200192915050565b6bffffffffffffffffffffffff19606094851b811682529290931b9091166014830152602882015260480190565b60008385833750909101908152602001919050565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03919091166020830152604082015260600190565b918252602082015260400190565b84815260208101849052608081016120ca846125c6565b60408201939093526060015292915050565b6000848252604060208301526120f6604083018486611f8f565b95945050505050565b86815260ff861660208201526001600160401b03851660408201526001600160a01b038416606082015260a0608082018190526000906121429083018486611f8f565b98975050505050505050565b600060208252611c6a6020830184611fb9565b600060608252612175606083018688611f8f565b6001600160a01b03949094166020830152506040015292915050565b6020808252601c908201527f70726f706f73616c20616c7265616479207472616e7366657272656400000000604082015260600190565b60208082526016908201527570726f706f73616c206973206e6f742061637469766560501b604082015260600190565b6020808252601590820152741c995b185e595c88185b1c9958591e481d9bdd1959605a1b604082015260600190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526019908201527f696e76616c6964207265736f757263652063617465676f727900000000000000604082015260600190565b6020808252601a908201527f64657374696e6174696f6e436861696e49442069732073656c66000000000000604082015260600190565b6020808252601b908201527f6461746120646f65736e2774206d617463682064617461686173680000000000604082015260600190565b6020808252601a908201527f50726f706f73616c20616c72656164792063616e63656c6c6564000000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252818101527f7265736f757263654944206e6f74206d617070656420746f2068616e646c6572604082015260600190565b6020808252818101527f50726f706f73616c206e6f7420617420657870697279207468726573686f6c64604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b602080825260119082015270039b2b73232b9103737ba1030b236b4b71607d1b604082015260600190565b6020808252601d908201527f6e6f742073657420627269646765436f756e7465722061646472657373000000604082015260600190565b6020808252602a908201527f70726f706f73616c20616c7265616479207061737365642f65786563757465646040820152690bd8d85b98d95b1b195960b21b606082015260800190565b6020808252818101527f73656e64657220646f65736e277420686176652072656c6179657220726f6c65604082015260600190565b6020808252601190820152700c8c2e8c2d0c2e6d040dad2e6dac2e8c6d607b1b604082015260600190565b60208082526019908201527f6e6f2068616e646c657220666f72207265736f75726365494400000000000000604082015260600190565b6000602082528251602083015260208301516040830152604083015160c0606084015261256f60e0840182611f4c565b6060850151848203601f19016080860152915061258c8183611f4c565b6080860151925061259c836125c6565b8260a086015260a086015160c086015280935050505092915050565b60ff91909116815260200190565b6005811061166857fe5b6001600160a01b038116811461166857600080fd5b6001600160401b038116811461166857600080fd5b6001600160481b038116811461166857600080fdfe803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417a2646970667358221220d46e002707653eb78428b770e920f93859660a4a65bd7e48fbcbaad4df81268264736f6c63430006040033"

// DeployNFTBridge deploys a new Ethereum contract, binding an instance of NFTBridge to it.
func DeployNFTBridge(auth *bind.TransactOpts, backend bind.ContractBackend, chainID uint8, expiry *big.Int, brigeAccessAddress_ common.Address) (common.Address, *types.Transaction, *NFTBridge, error) {
	parsed, err := abi.JSON(strings.NewReader(NFTBridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NFTBridgeBin), backend, chainID, expiry, brigeAccessAddress_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NFTBridge{NFTBridgeCaller: NFTBridgeCaller{contract: contract}, NFTBridgeTransactor: NFTBridgeTransactor{contract: contract}, NFTBridgeFilterer: NFTBridgeFilterer{contract: contract}}, nil
}

// NFTBridge is an auto generated Go binding around an Ethereum contract.
type NFTBridge struct {
	NFTBridgeCaller     // Read-only binding to the contract
	NFTBridgeTransactor // Write-only binding to the contract
	NFTBridgeFilterer   // Log filterer for contract events
}

// NFTBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type NFTBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NFTBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NFTBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NFTBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NFTBridgeSession struct {
	Contract     *NFTBridge        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NFTBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NFTBridgeCallerSession struct {
	Contract *NFTBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// NFTBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NFTBridgeTransactorSession struct {
	Contract     *NFTBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// NFTBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type NFTBridgeRaw struct {
	Contract *NFTBridge // Generic contract binding to access the raw methods on
}

// NFTBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NFTBridgeCallerRaw struct {
	Contract *NFTBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// NFTBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NFTBridgeTransactorRaw struct {
	Contract *NFTBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNFTBridge creates a new instance of NFTBridge, bound to a specific deployed contract.
func NewNFTBridge(address common.Address, backend bind.ContractBackend) (*NFTBridge, error) {
	contract, err := bindNFTBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NFTBridge{NFTBridgeCaller: NFTBridgeCaller{contract: contract}, NFTBridgeTransactor: NFTBridgeTransactor{contract: contract}, NFTBridgeFilterer: NFTBridgeFilterer{contract: contract}}, nil
}

// NewNFTBridgeCaller creates a new read-only instance of NFTBridge, bound to a specific deployed contract.
func NewNFTBridgeCaller(address common.Address, caller bind.ContractCaller) (*NFTBridgeCaller, error) {
	contract, err := bindNFTBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeCaller{contract: contract}, nil
}

// NewNFTBridgeTransactor creates a new write-only instance of NFTBridge, bound to a specific deployed contract.
func NewNFTBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*NFTBridgeTransactor, error) {
	contract, err := bindNFTBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeTransactor{contract: contract}, nil
}

// NewNFTBridgeFilterer creates a new log filterer instance of NFTBridge, bound to a specific deployed contract.
func NewNFTBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*NFTBridgeFilterer, error) {
	contract, err := bindNFTBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeFilterer{contract: contract}, nil
}

// bindNFTBridge binds a generic wrapper to an already deployed contract.
func bindNFTBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NFTBridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NFTBridge *NFTBridgeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NFTBridge.Contract.NFTBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NFTBridge *NFTBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTBridge.Contract.NFTBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NFTBridge *NFTBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NFTBridge.Contract.NFTBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NFTBridge *NFTBridgeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _NFTBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NFTBridge *NFTBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NFTBridge *NFTBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NFTBridge.Contract.contract.Transact(opts, method, params...)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_NFTBridge *NFTBridgeCaller) ChainID(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "_chainID")
	return *ret0, err
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_NFTBridge *NFTBridgeSession) ChainID() (uint8, error) {
	return _NFTBridge.Contract.ChainID(&_NFTBridge.CallOpts)
}

// ChainID is a free data retrieval call binding the contract method 0xbeab7131.
//
// Solidity: function _chainID() view returns(uint8)
func (_NFTBridge *NFTBridgeCallerSession) ChainID() (uint8, error) {
	return _NFTBridge.Contract.ChainID(&_NFTBridge.CallOpts)
}

// DepositRecords is a free data retrieval call binding the contract method 0x3ee7094a.
//
// Solidity: function _depositRecords(uint64 , uint8 ) view returns(bytes)
func (_NFTBridge *NFTBridgeCaller) DepositRecords(opts *bind.CallOpts, arg0 uint64, arg1 uint8) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "_depositRecords", arg0, arg1)
	return *ret0, err
}

// DepositRecords is a free data retrieval call binding the contract method 0x3ee7094a.
//
// Solidity: function _depositRecords(uint64 , uint8 ) view returns(bytes)
func (_NFTBridge *NFTBridgeSession) DepositRecords(arg0 uint64, arg1 uint8) ([]byte, error) {
	return _NFTBridge.Contract.DepositRecords(&_NFTBridge.CallOpts, arg0, arg1)
}

// DepositRecords is a free data retrieval call binding the contract method 0x3ee7094a.
//
// Solidity: function _depositRecords(uint64 , uint8 ) view returns(bytes)
func (_NFTBridge *NFTBridgeCallerSession) DepositRecords(arg0 uint64, arg1 uint8) ([]byte, error) {
	return _NFTBridge.Contract.DepositRecords(&_NFTBridge.CallOpts, arg0, arg1)
}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_NFTBridge *NFTBridgeCaller) Expiry(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "_expiry")
	return *ret0, err
}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_NFTBridge *NFTBridgeSession) Expiry() (*big.Int, error) {
	return _NFTBridge.Contract.Expiry(&_NFTBridge.CallOpts)
}

// Expiry is a free data retrieval call binding the contract method 0xc5ec8970.
//
// Solidity: function _expiry() view returns(uint256)
func (_NFTBridge *NFTBridgeCallerSession) Expiry() (*big.Int, error) {
	return _NFTBridge.Contract.Expiry(&_NFTBridge.CallOpts)
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x7febe63f.
//
// Solidity: function _hasVotedOnProposal(uint72 , bytes32 , address ) view returns(bool)
func (_NFTBridge *NFTBridgeCaller) HasVotedOnProposal(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte, arg2 common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "_hasVotedOnProposal", arg0, arg1, arg2)
	return *ret0, err
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x7febe63f.
//
// Solidity: function _hasVotedOnProposal(uint72 , bytes32 , address ) view returns(bool)
func (_NFTBridge *NFTBridgeSession) HasVotedOnProposal(arg0 *big.Int, arg1 [32]byte, arg2 common.Address) (bool, error) {
	return _NFTBridge.Contract.HasVotedOnProposal(&_NFTBridge.CallOpts, arg0, arg1, arg2)
}

// HasVotedOnProposal is a free data retrieval call binding the contract method 0x7febe63f.
//
// Solidity: function _hasVotedOnProposal(uint72 , bytes32 , address ) view returns(bool)
func (_NFTBridge *NFTBridgeCallerSession) HasVotedOnProposal(arg0 *big.Int, arg1 [32]byte, arg2 common.Address) (bool, error) {
	return _NFTBridge.Contract.HasVotedOnProposal(&_NFTBridge.CallOpts, arg0, arg1, arg2)
}

// Proposals is a free data retrieval call binding the contract method 0x50598719.
//
// Solidity: function _proposals(uint72 , bytes32 ) view returns(bytes32 _resourceID, bytes32 _dataHash, uint8 _status, uint256 _proposedBlock)
func (_NFTBridge *NFTBridgeCaller) Proposals(opts *bind.CallOpts, arg0 *big.Int, arg1 [32]byte) (struct {
	ResourceID    [32]byte
	DataHash      [32]byte
	Status        uint8
	ProposedBlock *big.Int
}, error) {
	ret := new(struct {
		ResourceID    [32]byte
		DataHash      [32]byte
		Status        uint8
		ProposedBlock *big.Int
	})
	out := ret
	err := _NFTBridge.contract.Call(opts, out, "_proposals", arg0, arg1)
	return *ret, err
}

// Proposals is a free data retrieval call binding the contract method 0x50598719.
//
// Solidity: function _proposals(uint72 , bytes32 ) view returns(bytes32 _resourceID, bytes32 _dataHash, uint8 _status, uint256 _proposedBlock)
func (_NFTBridge *NFTBridgeSession) Proposals(arg0 *big.Int, arg1 [32]byte) (struct {
	ResourceID    [32]byte
	DataHash      [32]byte
	Status        uint8
	ProposedBlock *big.Int
}, error) {
	return _NFTBridge.Contract.Proposals(&_NFTBridge.CallOpts, arg0, arg1)
}

// Proposals is a free data retrieval call binding the contract method 0x50598719.
//
// Solidity: function _proposals(uint72 , bytes32 ) view returns(bytes32 _resourceID, bytes32 _dataHash, uint8 _status, uint256 _proposedBlock)
func (_NFTBridge *NFTBridgeCallerSession) Proposals(arg0 *big.Int, arg1 [32]byte) (struct {
	ResourceID    [32]byte
	DataHash      [32]byte
	Status        uint8
	ProposedBlock *big.Int
}, error) {
	return _NFTBridge.Contract.Proposals(&_NFTBridge.CallOpts, arg0, arg1)
}

// ResourceIDToCategory is a free data retrieval call binding the contract method 0xc13e9197.
//
// Solidity: function _resourceIDToCategory(bytes32 ) view returns(string)
func (_NFTBridge *NFTBridgeCaller) ResourceIDToCategory(opts *bind.CallOpts, arg0 [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "_resourceIDToCategory", arg0)
	return *ret0, err
}

// ResourceIDToCategory is a free data retrieval call binding the contract method 0xc13e9197.
//
// Solidity: function _resourceIDToCategory(bytes32 ) view returns(string)
func (_NFTBridge *NFTBridgeSession) ResourceIDToCategory(arg0 [32]byte) (string, error) {
	return _NFTBridge.Contract.ResourceIDToCategory(&_NFTBridge.CallOpts, arg0)
}

// ResourceIDToCategory is a free data retrieval call binding the contract method 0xc13e9197.
//
// Solidity: function _resourceIDToCategory(bytes32 ) view returns(string)
func (_NFTBridge *NFTBridgeCallerSession) ResourceIDToCategory(arg0 [32]byte) (string, error) {
	return _NFTBridge.Contract.ResourceIDToCategory(&_NFTBridge.CallOpts, arg0)
}

// TotalProposals is a free data retrieval call binding the contract method 0x9d5773e0.
//
// Solidity: function _totalProposals() view returns(uint256)
func (_NFTBridge *NFTBridgeCaller) TotalProposals(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "_totalProposals")
	return *ret0, err
}

// TotalProposals is a free data retrieval call binding the contract method 0x9d5773e0.
//
// Solidity: function _totalProposals() view returns(uint256)
func (_NFTBridge *NFTBridgeSession) TotalProposals() (*big.Int, error) {
	return _NFTBridge.Contract.TotalProposals(&_NFTBridge.CallOpts)
}

// TotalProposals is a free data retrieval call binding the contract method 0x9d5773e0.
//
// Solidity: function _totalProposals() view returns(uint256)
func (_NFTBridge *NFTBridgeCallerSession) TotalProposals() (*big.Int, error) {
	return _NFTBridge.Contract.TotalProposals(&_NFTBridge.CallOpts)
}

// BridgeAccessAddress is a free data retrieval call binding the contract method 0xf359d983.
//
// Solidity: function bridgeAccessAddress() view returns(address)
func (_NFTBridge *NFTBridgeCaller) BridgeAccessAddress(opts *bind.CallOpts) (common.ContractAddress, error) {
	var (
		ret0 = new(common.ContractAddress)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "bridgeAccessAddress")
	return *ret0, err
}

// BridgeAccessAddress is a free data retrieval call binding the contract method 0xf359d983.
//
// Solidity: function bridgeAccessAddress() view returns(address)
func (_NFTBridge *NFTBridgeSession) BridgeAccessAddress() (common.ContractAddress, error) {
	return _NFTBridge.Contract.BridgeAccessAddress(&_NFTBridge.CallOpts)
}

// BridgeAccessAddress is a free data retrieval call binding the contract method 0xf359d983.
//
// Solidity: function bridgeAccessAddress() view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) BridgeAccessAddress() (common.ContractAddress, error) {
	return _NFTBridge.Contract.BridgeAccessAddress(&_NFTBridge.CallOpts)
}

// BridgeCounterAddress is a free data retrieval call binding the contract method 0x50366faf.
//
// Solidity: function bridgeCounterAddress() view returns(address)
func (_NFTBridge *NFTBridgeCaller) BridgeCounterAddress(opts *bind.CallOpts) (common.ContractAddress, error) {
	var (
		ret0 = new(common.ContractAddress)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "bridgeCounterAddress")
	return *ret0, err
}

// BridgeCounterAddress is a free data retrieval call binding the contract method 0x50366faf.
//
// Solidity: function bridgeCounterAddress() view returns(address)
func (_NFTBridge *NFTBridgeSession) BridgeCounterAddress() (common.ContractAddress, error) {
	return _NFTBridge.Contract.BridgeCounterAddress(&_NFTBridge.CallOpts)
}

// BridgeCounterAddress is a free data retrieval call binding the contract method 0x50366faf.
//
// Solidity: function bridgeCounterAddress() view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) BridgeCounterAddress() (common.ContractAddress, error) {
	return _NFTBridge.Contract.BridgeCounterAddress(&_NFTBridge.CallOpts)
}

// Bytes32ToString is a free data retrieval call binding the contract method 0x9201de55.
//
// Solidity: function bytes32ToString(bytes32 x) pure returns(string)
func (_NFTBridge *NFTBridgeCaller) Bytes32ToString(opts *bind.CallOpts, x [32]byte) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "bytes32ToString", x)
	return *ret0, err
}

// Bytes32ToString is a free data retrieval call binding the contract method 0x9201de55.
//
// Solidity: function bytes32ToString(bytes32 x) pure returns(string)
func (_NFTBridge *NFTBridgeSession) Bytes32ToString(x [32]byte) (string, error) {
	return _NFTBridge.Contract.Bytes32ToString(&_NFTBridge.CallOpts, x)
}

// Bytes32ToString is a free data retrieval call binding the contract method 0x9201de55.
//
// Solidity: function bytes32ToString(bytes32 x) pure returns(string)
func (_NFTBridge *NFTBridgeCallerSession) Bytes32ToString(x [32]byte) (string, error) {
	return _NFTBridge.Contract.Bytes32ToString(&_NFTBridge.CallOpts, x)
}

// CrossFeeAddress is a free data retrieval call binding the contract method 0x682150c9.
//
// Solidity: function crossFeeAddress() view returns(address)
func (_NFTBridge *NFTBridgeCaller) CrossFeeAddress(opts *bind.CallOpts) (common.ContractAddress, error) {
	var (
		ret0 = new(common.ContractAddress)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "crossFeeAddress")
	return *ret0, err
}

// CrossFeeAddress is a free data retrieval call binding the contract method 0x682150c9.
//
// Solidity: function crossFeeAddress() view returns(address)
func (_NFTBridge *NFTBridgeSession) CrossFeeAddress() (common.ContractAddress, error) {
	return _NFTBridge.Contract.CrossFeeAddress(&_NFTBridge.CallOpts)
}

// CrossFeeAddress is a free data retrieval call binding the contract method 0x682150c9.
//
// Solidity: function crossFeeAddress() view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) CrossFeeAddress() (common.ContractAddress, error) {
	return _NFTBridge.Contract.CrossFeeAddress(&_NFTBridge.CallOpts)
}

// GetProposal is a free data retrieval call binding the contract method 0xa9cf69fa.
//
// Solidity: function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) view returns((bytes32,bytes32,address[],address[],uint8,uint256))
func (_NFTBridge *NFTBridgeCaller) GetProposal(opts *bind.CallOpts, originChainID uint8, depositNonce uint64, dataHash [32]byte) (NFTBridgeProposal, error) {
	var (
		ret0 = new(NFTBridgeProposal)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "getProposal", originChainID, depositNonce, dataHash)
	return *ret0, err
}

// GetProposal is a free data retrieval call binding the contract method 0xa9cf69fa.
//
// Solidity: function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) view returns((bytes32,bytes32,address[],address[],uint8,uint256))
func (_NFTBridge *NFTBridgeSession) GetProposal(originChainID uint8, depositNonce uint64, dataHash [32]byte) (NFTBridgeProposal, error) {
	return _NFTBridge.Contract.GetProposal(&_NFTBridge.CallOpts, originChainID, depositNonce, dataHash)
}

// GetProposal is a free data retrieval call binding the contract method 0xa9cf69fa.
//
// Solidity: function getProposal(uint8 originChainID, uint64 depositNonce, bytes32 dataHash) view returns((bytes32,bytes32,address[],address[],uint8,uint256))
func (_NFTBridge *NFTBridgeCallerSession) GetProposal(originChainID uint8, depositNonce uint64, dataHash [32]byte) (NFTBridgeProposal, error) {
	return _NFTBridge.Contract.GetProposal(&_NFTBridge.CallOpts, originChainID, depositNonce, dataHash)
}

// MinCrossAmount is a free data retrieval call binding the contract method 0xfca08900.
//
// Solidity: function minCrossAmount(bytes32 resourceId) view returns(uint256)
func (_NFTBridge *NFTBridgeCaller) MinCrossAmount(opts *bind.CallOpts, resourceId [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "minCrossAmount", resourceId)
	return *ret0, err
}

// MinCrossAmount is a free data retrieval call binding the contract method 0xfca08900.
//
// Solidity: function minCrossAmount(bytes32 resourceId) view returns(uint256)
func (_NFTBridge *NFTBridgeSession) MinCrossAmount(resourceId [32]byte) (*big.Int, error) {
	return _NFTBridge.Contract.MinCrossAmount(&_NFTBridge.CallOpts, resourceId)
}

// MinCrossAmount is a free data retrieval call binding the contract method 0xfca08900.
//
// Solidity: function minCrossAmount(bytes32 resourceId) view returns(uint256)
func (_NFTBridge *NFTBridgeCallerSession) MinCrossAmount(resourceId [32]byte) (*big.Int, error) {
	return _NFTBridge.Contract.MinCrossAmount(&_NFTBridge.CallOpts, resourceId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NFTBridge *NFTBridgeCaller) Owner(opts *bind.CallOpts) (common.ContractAddress, error) {
	var (
		ret0 = new(common.ContractAddress)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NFTBridge *NFTBridgeSession) Owner() (common.ContractAddress, error) {
	return _NFTBridge.Contract.Owner(&_NFTBridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) Owner() (common.ContractAddress, error) {
	return _NFTBridge.Contract.Owner(&_NFTBridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NFTBridge *NFTBridgeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NFTBridge *NFTBridgeSession) Paused() (bool, error) {
	return _NFTBridge.Contract.Paused(&_NFTBridge.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NFTBridge *NFTBridgeCallerSession) Paused() (bool, error) {
	return _NFTBridge.Contract.Paused(&_NFTBridge.CallOpts)
}

// ResourceIDToLimit is a free data retrieval call binding the contract method 0xfa6bbe47.
//
// Solidity: function resourceIDToLimit(bytes32 ) view returns(uint256 min, uint256 max)
func (_NFTBridge *NFTBridgeCaller) ResourceIDToLimit(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	ret := new(struct {
		Min *big.Int
		Max *big.Int
	})
	out := ret
	err := _NFTBridge.contract.Call(opts, out, "resourceIDToLimit", arg0)
	return *ret, err
}

// ResourceIDToLimit is a free data retrieval call binding the contract method 0xfa6bbe47.
//
// Solidity: function resourceIDToLimit(bytes32 ) view returns(uint256 min, uint256 max)
func (_NFTBridge *NFTBridgeSession) ResourceIDToLimit(arg0 [32]byte) (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	return _NFTBridge.Contract.ResourceIDToLimit(&_NFTBridge.CallOpts, arg0)
}

// ResourceIDToLimit is a free data retrieval call binding the contract method 0xfa6bbe47.
//
// Solidity: function resourceIDToLimit(bytes32 ) view returns(uint256 min, uint256 max)
func (_NFTBridge *NFTBridgeCallerSession) ResourceIDToLimit(arg0 [32]byte) (struct {
	Min *big.Int
	Max *big.Int
}, error) {
	return _NFTBridge.Contract.ResourceIDToLimit(&_NFTBridge.CallOpts, arg0)
}

// Src721HandlerAddress is a free data retrieval call binding the contract method 0xce804db7.
//
// Solidity: function src721HandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeCaller) Src721HandlerAddress(opts *bind.CallOpts) (common.ContractAddress, error) {
	var (
		ret0 = new(common.ContractAddress)
	)
	out := ret0
	err := _NFTBridge.contract.Call(opts, out, "src721HandlerAddress")
	return *ret0, err
}

// Src721HandlerAddress is a free data retrieval call binding the contract method 0xce804db7.
//
// Solidity: function src721HandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeSession) Src721HandlerAddress() (common.ContractAddress, error) {
	return _NFTBridge.Contract.Src721HandlerAddress(&_NFTBridge.CallOpts)
}

// Src721HandlerAddress is a free data retrieval call binding the contract method 0xce804db7.
//
// Solidity: function src721HandlerAddress() view returns(address)
func (_NFTBridge *NFTBridgeCallerSession) Src721HandlerAddress() (common.ContractAddress, error) {
	return _NFTBridge.Contract.Src721HandlerAddress(&_NFTBridge.CallOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_NFTBridge *NFTBridgeTransactor) AdminPauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminPauseTransfers")
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_NFTBridge *NFTBridgeSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminPauseTransfers(&_NFTBridge.TransactOpts)
}

// AdminPauseTransfers is a paid mutator transaction binding the contract method 0x80ae1c28.
//
// Solidity: function adminPauseTransfers() returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminPauseTransfers() (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminPauseTransfers(&_NFTBridge.TransactOpts)
}

// AdminSetBridgeCounterContract is a paid mutator transaction binding the contract method 0x12d93656.
//
// Solidity: function adminSetBridgeCounterContract(address bridgeCounter_) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminSetBridgeCounterContract(opts *bind.TransactOpts, bridgeCounter_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminSetBridgeCounterContract", bridgeCounter_)
}

// AdminSetBridgeCounterContract is a paid mutator transaction binding the contract method 0x12d93656.
//
// Solidity: function adminSetBridgeCounterContract(address bridgeCounter_) returns()
func (_NFTBridge *NFTBridgeSession) AdminSetBridgeCounterContract(bridgeCounter_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetBridgeCounterContract(&_NFTBridge.TransactOpts, bridgeCounter_)
}

// AdminSetBridgeCounterContract is a paid mutator transaction binding the contract method 0x12d93656.
//
// Solidity: function adminSetBridgeCounterContract(address bridgeCounter_) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminSetBridgeCounterContract(bridgeCounter_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetBridgeCounterContract(&_NFTBridge.TransactOpts, bridgeCounter_)
}

// AdminSetCrossFeeContract is a paid mutator transaction binding the contract method 0xec226892.
//
// Solidity: function adminSetCrossFeeContract(address crossFee_) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminSetCrossFeeContract(opts *bind.TransactOpts, crossFee_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminSetCrossFeeContract", crossFee_)
}

// AdminSetCrossFeeContract is a paid mutator transaction binding the contract method 0xec226892.
//
// Solidity: function adminSetCrossFeeContract(address crossFee_) returns()
func (_NFTBridge *NFTBridgeSession) AdminSetCrossFeeContract(crossFee_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetCrossFeeContract(&_NFTBridge.TransactOpts, crossFee_)
}

// AdminSetCrossFeeContract is a paid mutator transaction binding the contract method 0xec226892.
//
// Solidity: function adminSetCrossFeeContract(address crossFee_) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminSetCrossFeeContract(crossFee_ common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetCrossFeeContract(&_NFTBridge.TransactOpts, crossFee_)
}

// AdminSetResourceInfo is a paid mutator transaction binding the contract method 0x7171750b.
//
// Solidity: function adminSetResourceInfo(bytes32 resourceID, address ticketAddress, string category) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminSetResourceInfo(opts *bind.TransactOpts, resourceID [32]byte, ticketAddress common.Address, category string) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminSetResourceInfo", resourceID, ticketAddress, category)
}

// AdminSetResourceInfo is a paid mutator transaction binding the contract method 0x7171750b.
//
// Solidity: function adminSetResourceInfo(bytes32 resourceID, address ticketAddress, string category) returns()
func (_NFTBridge *NFTBridgeSession) AdminSetResourceInfo(resourceID [32]byte, ticketAddress common.Address, category string) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetResourceInfo(&_NFTBridge.TransactOpts, resourceID, ticketAddress, category)
}

// AdminSetResourceInfo is a paid mutator transaction binding the contract method 0x7171750b.
//
// Solidity: function adminSetResourceInfo(bytes32 resourceID, address ticketAddress, string category) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminSetResourceInfo(resourceID [32]byte, ticketAddress common.Address, category string) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetResourceInfo(&_NFTBridge.TransactOpts, resourceID, ticketAddress, category)
}

// AdminSetSrc721HandlerContract is a paid mutator transaction binding the contract method 0xc2ca1ddc.
//
// Solidity: function adminSetSrc721HandlerContract(address handler) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminSetSrc721HandlerContract(opts *bind.TransactOpts, handler common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminSetSrc721HandlerContract", handler)
}

// AdminSetSrc721HandlerContract is a paid mutator transaction binding the contract method 0xc2ca1ddc.
//
// Solidity: function adminSetSrc721HandlerContract(address handler) returns()
func (_NFTBridge *NFTBridgeSession) AdminSetSrc721HandlerContract(handler common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetSrc721HandlerContract(&_NFTBridge.TransactOpts, handler)
}

// AdminSetSrc721HandlerContract is a paid mutator transaction binding the contract method 0xc2ca1ddc.
//
// Solidity: function adminSetSrc721HandlerContract(address handler) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminSetSrc721HandlerContract(handler common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminSetSrc721HandlerContract(&_NFTBridge.TransactOpts, handler)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_NFTBridge *NFTBridgeTransactor) AdminUnpauseTransfers(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminUnpauseTransfers")
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_NFTBridge *NFTBridgeSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminUnpauseTransfers(&_NFTBridge.TransactOpts)
}

// AdminUnpauseTransfers is a paid mutator transaction binding the contract method 0xffaac0eb.
//
// Solidity: function adminUnpauseTransfers() returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminUnpauseTransfers() (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminUnpauseTransfers(&_NFTBridge.TransactOpts)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0x51abc947.
//
// Solidity: function adminWithdraw(string currency, address recipient, bytes32 tkt) returns()
func (_NFTBridge *NFTBridgeTransactor) AdminWithdraw(opts *bind.TransactOpts, currency string, recipient common.Address, tkt [32]byte) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "adminWithdraw", currency, recipient, tkt)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0x51abc947.
//
// Solidity: function adminWithdraw(string currency, address recipient, bytes32 tkt) returns()
func (_NFTBridge *NFTBridgeSession) AdminWithdraw(currency string, recipient common.Address, tkt [32]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminWithdraw(&_NFTBridge.TransactOpts, currency, recipient, tkt)
}

// AdminWithdraw is a paid mutator transaction binding the contract method 0x51abc947.
//
// Solidity: function adminWithdraw(string currency, address recipient, bytes32 tkt) returns()
func (_NFTBridge *NFTBridgeTransactorSession) AdminWithdraw(currency string, recipient common.Address, tkt [32]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.AdminWithdraw(&_NFTBridge.TransactOpts, currency, recipient, tkt)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x17f03ce5.
//
// Solidity: function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeTransactor) CancelProposal(opts *bind.TransactOpts, chainID uint8, depositNonce uint64, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "cancelProposal", chainID, depositNonce, dataHash)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x17f03ce5.
//
// Solidity: function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeSession) CancelProposal(chainID uint8, depositNonce uint64, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.CancelProposal(&_NFTBridge.TransactOpts, chainID, depositNonce, dataHash)
}

// CancelProposal is a paid mutator transaction binding the contract method 0x17f03ce5.
//
// Solidity: function cancelProposal(uint8 chainID, uint64 depositNonce, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeTransactorSession) CancelProposal(chainID uint8, depositNonce uint64, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.CancelProposal(&_NFTBridge.TransactOpts, chainID, depositNonce, dataHash)
}

// DepositNFT is a paid mutator transaction binding the contract method 0x850efd99.
//
// Solidity: function depositNFT(uint8 destinationChainID, bytes32 resourceID, bytes recipient) payable returns()
func (_NFTBridge *NFTBridgeTransactor) DepositNFT(opts *bind.TransactOpts, destinationChainID uint8, resourceID [32]byte, recipient []byte) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "depositNFT", destinationChainID, resourceID, recipient)
}

// DepositNFT is a paid mutator transaction binding the contract method 0x850efd99.
//
// Solidity: function depositNFT(uint8 destinationChainID, bytes32 resourceID, bytes recipient) payable returns()
func (_NFTBridge *NFTBridgeSession) DepositNFT(destinationChainID uint8, resourceID [32]byte, recipient []byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.DepositNFT(&_NFTBridge.TransactOpts, destinationChainID, resourceID, recipient)
}

// DepositNFT is a paid mutator transaction binding the contract method 0x850efd99.
//
// Solidity: function depositNFT(uint8 destinationChainID, bytes32 resourceID, bytes recipient) payable returns()
func (_NFTBridge *NFTBridgeTransactorSession) DepositNFT(destinationChainID uint8, resourceID [32]byte, recipient []byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.DepositNFT(&_NFTBridge.TransactOpts, destinationChainID, resourceID, recipient)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0xdbcf3f04.
//
// Solidity: function executeProposal(uint8 originChainID, uint64 depositNonce, bytes32 resourceID, address recipient, uint256 tokenId, bytes metaData) returns()
func (_NFTBridge *NFTBridgeTransactor) ExecuteProposal(opts *bind.TransactOpts, originChainID uint8, depositNonce uint64, resourceID [32]byte, recipient common.Address, tokenId *big.Int, metaData []byte) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "executeProposal", originChainID, depositNonce, resourceID, recipient, tokenId, metaData)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0xdbcf3f04.
//
// Solidity: function executeProposal(uint8 originChainID, uint64 depositNonce, bytes32 resourceID, address recipient, uint256 tokenId, bytes metaData) returns()
func (_NFTBridge *NFTBridgeSession) ExecuteProposal(originChainID uint8, depositNonce uint64, resourceID [32]byte, recipient common.Address, tokenId *big.Int, metaData []byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.ExecuteProposal(&_NFTBridge.TransactOpts, originChainID, depositNonce, resourceID, recipient, tokenId, metaData)
}

// ExecuteProposal is a paid mutator transaction binding the contract method 0xdbcf3f04.
//
// Solidity: function executeProposal(uint8 originChainID, uint64 depositNonce, bytes32 resourceID, address recipient, uint256 tokenId, bytes metaData) returns()
func (_NFTBridge *NFTBridgeTransactorSession) ExecuteProposal(originChainID uint8, depositNonce uint64, resourceID [32]byte, recipient common.Address, tokenId *big.Int, metaData []byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.ExecuteProposal(&_NFTBridge.TransactOpts, originChainID, depositNonce, resourceID, recipient, tokenId, metaData)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NFTBridge *NFTBridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NFTBridge *NFTBridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.TransferOwnership(&_NFTBridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_NFTBridge *NFTBridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _NFTBridge.Contract.TransferOwnership(&_NFTBridge.TransactOpts, newOwner)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x1ff013f1.
//
// Solidity: function voteProposal(uint8 chainID, uint64 depositNonce, bytes32 resourceID, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeTransactor) VoteProposal(opts *bind.TransactOpts, chainID uint8, depositNonce uint64, resourceID [32]byte, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.contract.Transact(opts, "voteProposal", chainID, depositNonce, resourceID, dataHash)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x1ff013f1.
//
// Solidity: function voteProposal(uint8 chainID, uint64 depositNonce, bytes32 resourceID, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeSession) VoteProposal(chainID uint8, depositNonce uint64, resourceID [32]byte, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.VoteProposal(&_NFTBridge.TransactOpts, chainID, depositNonce, resourceID, dataHash)
}

// VoteProposal is a paid mutator transaction binding the contract method 0x1ff013f1.
//
// Solidity: function voteProposal(uint8 chainID, uint64 depositNonce, bytes32 resourceID, bytes32 dataHash) returns()
func (_NFTBridge *NFTBridgeTransactorSession) VoteProposal(chainID uint8, depositNonce uint64, resourceID [32]byte, dataHash [32]byte) (*types.Transaction, error) {
	return _NFTBridge.Contract.VoteProposal(&_NFTBridge.TransactOpts, chainID, depositNonce, resourceID, dataHash)
}

// NFTBridgeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the NFTBridge contract.
type NFTBridgeDepositIterator struct {
	Event *NFTBridgeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  sero.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeDeposit represents a Deposit event raised by the NFTBridge contract.
type NFTBridgeDeposit struct {
	DestinationChainID uint8
	ResourceID         [32]byte
	DepositNonce       uint64
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed8.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce)
func (_NFTBridge *NFTBridgeFilterer) FilterDeposit(opts *bind.FilterOpts, destinationChainID []uint8, resourceID [][32]byte, depositNonce []uint64) (*NFTBridgeDepositIterator, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var resourceIDRule []interface{}
	for _, resourceIDItem := range resourceID {
		resourceIDRule = append(resourceIDRule, resourceIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "Deposit", destinationChainIDRule, resourceIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeDepositIterator{contract: _NFTBridge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed8.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce)
func (_NFTBridge *NFTBridgeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *NFTBridgeDeposit, destinationChainID []uint8, resourceID [][32]byte, depositNonce []uint64) (event.Subscription, error) {

	var destinationChainIDRule []interface{}
	for _, destinationChainIDItem := range destinationChainID {
		destinationChainIDRule = append(destinationChainIDRule, destinationChainIDItem)
	}
	var resourceIDRule []interface{}
	for _, resourceIDItem := range resourceID {
		resourceIDRule = append(resourceIDRule, resourceIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "Deposit", destinationChainIDRule, resourceIDRule, depositNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeDeposit)
				if err := _NFTBridge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed8.
//
// Solidity: event Deposit(uint8 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce)
func (_NFTBridge *NFTBridgeFilterer) ParseDeposit(log types.Log) (*NFTBridgeDeposit, error) {
	event := new(NFTBridgeDeposit)
	if err := _NFTBridge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the NFTBridge contract.
type NFTBridgePausedIterator struct {
	Event *NFTBridgePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  sero.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgePaused represents a Paused event raised by the NFTBridge contract.
type NFTBridgePaused struct {
	Account common.ContractAddress
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NFTBridge *NFTBridgeFilterer) FilterPaused(opts *bind.FilterOpts) (*NFTBridgePausedIterator, error) {

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &NFTBridgePausedIterator{contract: _NFTBridge.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NFTBridge *NFTBridgeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *NFTBridgePaused) (event.Subscription, error) {

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgePaused)
				if err := _NFTBridge.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NFTBridge *NFTBridgeFilterer) ParsePaused(log types.Log) (*NFTBridgePaused, error) {
	event := new(NFTBridgePaused)
	if err := _NFTBridge.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeProposalEventIterator is returned from FilterProposalEvent and is used to iterate over the raw logs and unpacked data for ProposalEvent events raised by the NFTBridge contract.
type NFTBridgeProposalEventIterator struct {
	Event *NFTBridgeProposalEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  sero.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeProposalEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeProposalEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeProposalEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeProposalEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeProposalEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeProposalEvent represents a ProposalEvent event raised by the NFTBridge contract.
type NFTBridgeProposalEvent struct {
	OriginChainID uint8
	DepositNonce  uint64
	Status        uint8
	ResourceID    [32]byte
	DataHash      [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterProposalEvent is a free log retrieval operation binding the contract event 0x803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417.
//
// Solidity: event ProposalEvent(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID, bytes32 dataHash)
func (_NFTBridge *NFTBridgeFilterer) FilterProposalEvent(opts *bind.FilterOpts, originChainID []uint8, depositNonce []uint64, status []uint8) (*NFTBridgeProposalEventIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "ProposalEvent", originChainIDRule, depositNonceRule, statusRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeProposalEventIterator{contract: _NFTBridge.contract, event: "ProposalEvent", logs: logs, sub: sub}, nil
}

// WatchProposalEvent is a free log subscription operation binding the contract event 0x803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417.
//
// Solidity: event ProposalEvent(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID, bytes32 dataHash)
func (_NFTBridge *NFTBridgeFilterer) WatchProposalEvent(opts *bind.WatchOpts, sink chan<- *NFTBridgeProposalEvent, originChainID []uint8, depositNonce []uint64, status []uint8) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "ProposalEvent", originChainIDRule, depositNonceRule, statusRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeProposalEvent)
				if err := _NFTBridge.contract.UnpackLog(event, "ProposalEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalEvent is a log parse operation binding the contract event 0x803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417.
//
// Solidity: event ProposalEvent(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID, bytes32 dataHash)
func (_NFTBridge *NFTBridgeFilterer) ParseProposalEvent(log types.Log) (*NFTBridgeProposalEvent, error) {
	event := new(NFTBridgeProposalEvent)
	if err := _NFTBridge.contract.UnpackLog(event, "ProposalEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeProposalVoteIterator is returned from FilterProposalVote and is used to iterate over the raw logs and unpacked data for ProposalVote events raised by the NFTBridge contract.
type NFTBridgeProposalVoteIterator struct {
	Event *NFTBridgeProposalVote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  sero.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeProposalVoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeProposalVote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeProposalVote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeProposalVoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeProposalVoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeProposalVote represents a ProposalVote event raised by the NFTBridge contract.
type NFTBridgeProposalVote struct {
	OriginChainID uint8
	DepositNonce  uint64
	Status        uint8
	ResourceID    [32]byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterProposalVote is a free log retrieval operation binding the contract event 0x25f8daaa4635a7729927ba3f5b3d59cc3320aca7c32c9db4e7ca7b9574343640.
//
// Solidity: event ProposalVote(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID)
func (_NFTBridge *NFTBridgeFilterer) FilterProposalVote(opts *bind.FilterOpts, originChainID []uint8, depositNonce []uint64, status []uint8) (*NFTBridgeProposalVoteIterator, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "ProposalVote", originChainIDRule, depositNonceRule, statusRule)
	if err != nil {
		return nil, err
	}
	return &NFTBridgeProposalVoteIterator{contract: _NFTBridge.contract, event: "ProposalVote", logs: logs, sub: sub}, nil
}

// WatchProposalVote is a free log subscription operation binding the contract event 0x25f8daaa4635a7729927ba3f5b3d59cc3320aca7c32c9db4e7ca7b9574343640.
//
// Solidity: event ProposalVote(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID)
func (_NFTBridge *NFTBridgeFilterer) WatchProposalVote(opts *bind.WatchOpts, sink chan<- *NFTBridgeProposalVote, originChainID []uint8, depositNonce []uint64, status []uint8) (event.Subscription, error) {

	var originChainIDRule []interface{}
	for _, originChainIDItem := range originChainID {
		originChainIDRule = append(originChainIDRule, originChainIDItem)
	}
	var depositNonceRule []interface{}
	for _, depositNonceItem := range depositNonce {
		depositNonceRule = append(depositNonceRule, depositNonceItem)
	}
	var statusRule []interface{}
	for _, statusItem := range status {
		statusRule = append(statusRule, statusItem)
	}

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "ProposalVote", originChainIDRule, depositNonceRule, statusRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeProposalVote)
				if err := _NFTBridge.contract.UnpackLog(event, "ProposalVote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposalVote is a log parse operation binding the contract event 0x25f8daaa4635a7729927ba3f5b3d59cc3320aca7c32c9db4e7ca7b9574343640.
//
// Solidity: event ProposalVote(uint8 indexed originChainID, uint64 indexed depositNonce, uint8 indexed status, bytes32 resourceID)
func (_NFTBridge *NFTBridgeFilterer) ParseProposalVote(log types.Log) (*NFTBridgeProposalVote, error) {
	event := new(NFTBridgeProposalVote)
	if err := _NFTBridge.contract.UnpackLog(event, "ProposalVote", log); err != nil {
		return nil, err
	}
	return event, nil
}

// NFTBridgeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the NFTBridge contract.
type NFTBridgeUnpausedIterator struct {
	Event *NFTBridgeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log    // Log channel receiving the found contract events
	sub  sero.Subscription // Subscription for errors, completion and termination
	done bool              // Whether the subscription completed delivering logs
	fail error             // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NFTBridgeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NFTBridgeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NFTBridgeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NFTBridgeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NFTBridgeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NFTBridgeUnpaused represents a Unpaused event raised by the NFTBridge contract.
type NFTBridgeUnpaused struct {
	Account common.ContractAddress
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NFTBridge *NFTBridgeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*NFTBridgeUnpausedIterator, error) {

	logs, sub, err := _NFTBridge.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &NFTBridgeUnpausedIterator{contract: _NFTBridge.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NFTBridge *NFTBridgeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *NFTBridgeUnpaused) (event.Subscription, error) {

	logs, sub, err := _NFTBridge.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NFTBridgeUnpaused)
				if err := _NFTBridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NFTBridge *NFTBridgeFilterer) ParseUnpaused(log types.Log) (*NFTBridgeUnpaused, error) {
	event := new(NFTBridgeUnpaused)
	if err := _NFTBridge.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}
