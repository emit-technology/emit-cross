pragma solidity 0.6.4;
pragma experimental ABIEncoderV2;

import "../interfaces/IDepositExecute.sol";
import "./HandlerHelpers.sol";
import "../ERC721Safe.sol";

import "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol";

/**
    @title Handles ERC721 deposits and deposit executions.
    @author ChainSafe Systems.
    @notice This contract is intended to be used with the Bridge contract.
 */
contract ERC721Handler is IDepositNFTExecute, HandlerHelpers, ERC721Safe {

    bytes4 private constant _INTERFACE_ERC721_METADATA = 0x5b5e139f;

    struct DepositRecord {
        address _tokenAddress;
        uint8   _destinationChainID;
        bytes32 _resourceID;
        bytes   _destinationRecipientAddress;
        address _depositer;
        uint    _tokenID;
        bytes   _metaData;
    }

    // destId => depositNonce => Deposit Record
    mapping (uint8 => mapping (uint64 => DepositRecord)) public _depositRecords;


    constructor(
        address bridgeAddress
    ) public {

        _bridgeAddress = bridgeAddress;
    }

    /**
        @param depositNonce This ID will have been generated by the Bridge contract.
        @param destId ID of chain deposit will be bridged to.
        @return DepositRecord which consists of:
        - _tokenAddress Address used when {deposit} was executed.
        - _destinationChainID ChainID deposited tokens are intended to end up on.
        - _resourceID ResourceID used when {deposit} was executed.
        - _destinationRecipientAddress Address tokens are intended to be deposited to on desitnation chain.
        - _depositer Address that initially called {deposit} in the Bridge contract.
        - _tokenID ID of ERC721.
        - _metaData Optional ERC721 metadata.
    */
    function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory) {
        return _depositRecords[destId][depositNonce];
    }


    function deposit(
        bytes32 resourceID,
        uint8   destinationChainID,
        uint64  depositNonce,
        address depositer,
        bytes calldata recipient,
        uint256 tokenId
    ) external override onlyBridge {

        bytes memory metadata;


        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];

        require(_contractWhitelist[tokenAddress], "provided tokenAddress is not whitelisted");

        IERC721Metadata erc721 = IERC721Metadata(tokenAddress);
        metadata = bytes(erc721.tokenURI(tokenId));


        if (_burnList[tokenAddress]) {
            burnERC721(tokenAddress, tokenId);
        } else {
            lockERC721(tokenAddress, depositer, address(this), tokenId);
        }

        _depositRecords[destinationChainID][depositNonce] = DepositRecord(
            tokenAddress,
            destinationChainID,
            resourceID,
            recipient,
            depositer,
            tokenId,
            metadata
        );
    }


    function executeProposal(bytes32 resourceID, address recipientAddress,uint256 tokenId,bytes calldata metadata) external override onlyBridge {

        address tokenAddress = _resourceIDToTokenContractAddress[resourceID];

        require(_contractWhitelist[tokenAddress], "provided tokenAddress is not whitelisted");


        if (_burnList[tokenAddress]) {
            mintERC721(tokenAddress, address(recipientAddress), tokenId, metadata);
        } else {
            releaseERC721(tokenAddress, address(this), address(recipientAddress), tokenId);
        }

    }



    /**
        @notice Used to manually release ERC721 tokens from ERC721Safe.
        @param tokenAddress Address of token contract to release.
        @param recipient Address to release token to.
        @param tokenID The ERC721 token ID to release.
     */
    function withdraw(address tokenAddress, address recipient, uint tokenID) external override onlyBridge {
        releaseERC721(tokenAddress, address(this), recipient, tokenID);
    }
}
